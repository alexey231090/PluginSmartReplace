@tool
extends EditorPlugin

# ===== API –ù–ê–°–¢–†–û–ô–ö–ò =====
const GEMINI_API_BASE_URL = "https://generativelanguage.googleapis.com/v1/models/"
const OPENROUTER_API_BASE_URL = "https://openrouter.ai/api/v1/chat/completions"

var gemini_api_key: String = ""  # –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
var openrouter_api_key: String = ""  # –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫

# –í—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ AI
var current_provider: String = "gemini"  # "gemini" –∏–ª–∏ "openrouter"

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ)
var available_models = {
	"gemini-1.5-flash": {
		"name": "üöÄ Gemini Flash",
		"description": "–ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)",
		"max_tokens": 2000,
		"daily_limit": 50,
		"provider": "gemini"
	}
}

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ OpenRouter (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ)
var openrouter_models = {
	"openai/gpt-4o-mini": {
		"name": "ü§ñ GPT-4o Mini",
		"description": "–ë—ã—Å—Ç—Ä–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å OpenAI (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)",
		"max_tokens": 4000,
		"daily_limit": 500,
		"provider": "openrouter"
	},
	"deepseek/deepseek-r1:free": {
		"name": "üíª DeepSeek R1",
		"description": "–ú–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ª–æ–≥–∏–∫–∏ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)",
		"max_tokens": 8000,
		"daily_limit": 1000,
		"provider": "openrouter"
	},
	"meta-llama/llama-3.1-8b-instruct": {
		"name": "ü¶ô Llama 3.1 8B",
		"description": "–õ–µ–≥–∫–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å Meta (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)",
		"max_tokens": 3000,
		"daily_limit": 1000,
		"provider": "openrouter"
	}
}

# –¢–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
var current_model: String = "openai/gpt-4o-mini"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenRouter (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å)
const CHAT_HISTORY_FILE = "res://chat_history.json"

# –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
var chat_history = []

# –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
var current_dialog = null

# –ú–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
var open_dialogs = []

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Godot
var system_messages = []

# –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
var is_requesting = false

# –°—á–µ—Ç—á–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
var daily_requests_counts: Dictionary = {}
var daily_requests_file: String = "user://daily_requests.json"
var last_request_date: String = ""

# –¢–µ–∫—É—â–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
var current_extracted_commands = ""

# –ò—Å—Ç–æ—Ä–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
var extracted_commands_history = []
const EXTRACTED_COMMANDS_HISTORY_FILE = "res://extracted_commands_history.json"

# –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
var executed_commands_history = []
const EXECUTED_COMMANDS_HISTORY_FILE = "res://executed_commands_history.json"

# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
var is_first_message_in_session = true

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–∫—Ä–∏–ø—Ç–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
var current_script_info = {"path": "", "filename": "", "node_path": "", "hierarchy": ""}

# ===== –°–ò–°–¢–ï–ú–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò =====
var debug_log_file: String = "user://smart_replace_debug.log"
var debug_log_enabled: bool = true

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥
func write_debug_log(message: String, level: String = "INFO"):
	if not debug_log_enabled:
		return
	
	var timestamp = Time.get_datetime_string_from_system()
	var log_entry = "[%s] [%s] %s" % [timestamp, level, message]
	
	var file = FileAccess.open(debug_log_file, FileAccess.READ_WRITE)
	if file:
		file.seek_end()
		file.store_line(log_entry)
		file.close()
	else:
		# –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
		file = FileAccess.open(debug_log_file, FileAccess.WRITE)
		if file:
			file.store_line(log_entry)
			file.close()
	
	# –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	print(log_entry)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–∞
func clear_debug_log():
	var file = FileAccess.open(debug_log_file, FileAccess.WRITE)
	if file:
		file.close()
		print("–õ–æ–≥ –æ—á–∏—â–µ–Ω")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ª–æ–≥–∞
func get_debug_log() -> String:
	if not FileAccess.file_exists(debug_log_file):
		return "–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
	
	var file = FileAccess.open(debug_log_file, FileAccess.READ)
	if file:
		var content = file.get_as_text()
		file.close()
		return content
	return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥ —Ñ–∞–π–ª"

# ===== OPENROUTER API –§–£–ù–ö–¶–ò–ò =====

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ API –∫–ª—é—á–∞ OpenRouter
func load_openrouter_api_key():
	var config_file = "user://smart_replace_config.ini"
	if FileAccess.file_exists(config_file):
		var file = FileAccess.open(config_file, FileAccess.READ)
		if file:
			var content = file.get_as_text()
			file.close()
			var lines = content.split("\n")
			for line in lines:
				if line.begins_with("openrouter_api_key="):
					openrouter_api_key = line.split("=", true, 1)[1].strip_edges()
					write_debug_log("OpenRouter API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω", "INFO")
					return
	write_debug_log("OpenRouter API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω", "WARNING")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–∞ OpenRouter
func save_openrouter_api_key():
	var config_file = "user://smart_replace_config.ini"
	var content = ""
	
	# –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
	if FileAccess.file_exists(config_file):
		var file = FileAccess.open(config_file, FileAccess.READ)
		if file:
			content = file.get_as_text()
			file.close()
	
	# –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º OpenRouter –∫–ª—é—á
	var lines = content.split("\n")
	var found = false
	for i in range(lines.size()):
		if lines[i].begins_with("openrouter_api_key="):
			lines[i] = "openrouter_api_key=" + openrouter_api_key
			found = true
			break
	
	if not found:
		lines.append("openrouter_api_key=" + openrouter_api_key)
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
	var file = FileAccess.open(config_file, FileAccess.WRITE)
	if file:
		file.store_string("\n".join(lines))
		file.close()
		write_debug_log("OpenRouter API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω", "INFO")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
func get_current_model_info() -> Dictionary:
	if current_provider == "gemini":
		return available_models.get(current_model, {})
	else:
		return openrouter_models.get(current_model, {})

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
func get_current_model_limit() -> int:
	var model_info = get_current_model_info()
	return model_info.get("daily_limit", 50)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –ª–æ–≥–æ–º
func show_debug_log_dialog():
	write_debug_log("–û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–∞", "INFO")
	
	var log_dialog = AcceptDialog.new()
	log_dialog.title = "–õ–æ–≥ –ø–ª–∞–≥–∏–Ω–∞ Smart Replace"
	log_dialog.size = Vector2(1000, 700)
	
	var vbox = VBoxContainer.new()
	log_dialog.add_child(vbox)
	
	var log_label = Label.new()
	log_label.text = "–õ–æ–≥ –ø–ª–∞–≥–∏–Ω–∞ (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º):"
	log_label.add_theme_font_size_override("font_size", 16)
	vbox.add_child(log_label)
	
	var log_edit = TextEdit.new()
	log_edit.text = get_debug_log()
	log_edit.editable = false
	log_edit.custom_minimum_size = Vector2(980, 500)
	log_edit.add_theme_font_size_override("font_size", 12)
	vbox.add_child(log_edit)
	
	var buttons = HBoxContainer.new()
	vbox.add_child(buttons)
	
	var refresh_button = Button.new()
	refresh_button.text = "–û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥"
	refresh_button.custom_minimum_size = Vector2(150, 40)
	refresh_button.add_theme_font_size_override("font_size", 14)
	refresh_button.pressed.connect(func():
		log_edit.text = get_debug_log()
	)
	buttons.add_child(refresh_button)
	
	var clear_log_button = Button.new()
	clear_log_button.text = "–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥"
	clear_log_button.custom_minimum_size = Vector2(150, 40)
	clear_log_button.add_theme_font_size_override("font_size", 14)
	clear_log_button.pressed.connect(func():
		clear_debug_log()
		log_edit.text = get_debug_log()
	)
	buttons.add_child(clear_log_button)
	
	var copy_log_button = Button.new()
	copy_log_button.text = "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥"
	copy_log_button.custom_minimum_size = Vector2(150, 40)
	copy_log_button.add_theme_font_size_override("font_size", 14)
	copy_log_button.pressed.connect(func():
		DisplayServer.clipboard_set(log_edit.text)
		print("–õ–æ–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
	)
	buttons.add_child(copy_log_button)
	
	var close_button = Button.new()
	close_button.text = "–ó–∞–∫—Ä—ã—Ç—å"
	close_button.custom_minimum_size = Vector2(100, 40)
	close_button.add_theme_font_size_override("font_size", 14)
	close_button.pressed.connect(func(): log_dialog.hide())
	buttons.add_child(close_button)
	
	get_editor_interface().get_base_control().add_child(log_dialog)
	log_dialog.popup_centered()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
func save_chat_history():
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∑–µ–ª –≤ –¥–µ—Ä–µ–≤–µ
	if not is_inside_tree():
		print("–£–∑–µ–ª –Ω–µ –≤ –¥–µ—Ä–µ–≤–µ, –æ—Ç–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏")
		return
	
	var file = FileAccess.open(CHAT_HISTORY_FILE, FileAccess.WRITE)
	if file:
		file.store_string(JSON.stringify(chat_history))
		file.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
func load_chat_history():
	if FileAccess.file_exists(CHAT_HISTORY_FILE):
		var file = FileAccess.open(CHAT_HISTORY_FILE, FileAccess.READ)
		if file:
			var content = file.get_as_text()
			file.close()
			var json = JSON.new()
			var parse_result = json.parse(content)
			if parse_result == OK:
				chat_history = json.data
			else:
				chat_history = []
		else:
			chat_history = []
	else:
		chat_history = []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
func load_chat_to_ui(chat_history_edit: RichTextLabel):
	chat_history_edit.text = ""
	for entry in chat_history:
		var color = "blue" if entry.role == "user" else "green"
		var sender = "–í—ã" if entry.role == "user" else "AI"
		var formatted_message = "[color=" + color + "][b]" + sender + ":[/b][/color] " + entry.content + "\n\n"
		chat_history_edit.append_text(formatted_message)
	
	# –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–æ–Ω—Ü—É
	chat_history_edit.scroll_to_line(chat_history_edit.get_line_count())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
func save_extracted_commands_history():
	var file = FileAccess.open(EXTRACTED_COMMANDS_HISTORY_FILE, FileAccess.WRITE)
	if file:
		file.store_string(JSON.stringify(extracted_commands_history))
		file.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
func load_extracted_commands_history():
	if FileAccess.file_exists(EXTRACTED_COMMANDS_HISTORY_FILE):
		var file = FileAccess.open(EXTRACTED_COMMANDS_HISTORY_FILE, FileAccess.READ)
		if file:
			var content = file.get_as_text()
			file.close()
			var json = JSON.new()
			var parse_result = json.parse(content)
			if parse_result == OK:
				extracted_commands_history = json.data
			else:
				extracted_commands_history = []
		else:
			extracted_commands_history = []
	else:
		extracted_commands_history = []

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—á–µ—Ç—á–∏–∫–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
func save_daily_requests():
	var data = {
		"counts": daily_requests_counts,
		"date": last_request_date
	}
	var file = FileAccess.open(daily_requests_file, FileAccess.WRITE)
	if file:
		file.store_string(JSON.stringify(data))
		file.close()

func load_daily_requests():
	if FileAccess.file_exists(daily_requests_file):
		var file = FileAccess.open(daily_requests_file, FileAccess.READ)
		if file:
			var content = file.get_as_text()
			file.close()
			var json = JSON.new()
			var parse_result = json.parse(content)
			if parse_result == OK:
				daily_requests_counts = json.data.get("counts", {})
				last_request_date = json.data.get("date", "")
			else:
				daily_requests_counts = {}
				last_request_date = ""
		else:
			daily_requests_counts = {}
			last_request_date = ""
	else:
		daily_requests_counts = {}
		last_request_date = ""

func check_and_update_daily_requests():
	var current_date = Time.get_datetime_string_from_system().split("T")[0]  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
	
	if last_request_date != current_date:
		# –ù–æ–≤—ã–π –¥–µ–Ω—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏
		daily_requests_counts.clear()
		last_request_date = current_date
		save_daily_requests()
		print("–°—á–µ—Ç—á–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è: ", current_date)
	
	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
	if not daily_requests_counts.has(current_model):
		daily_requests_counts[current_model] = 0
	
	return daily_requests_counts.get(current_model, 0)

func increment_daily_requests():
	if not daily_requests_counts.has(current_model):
		daily_requests_counts[current_model] = 0
	
	daily_requests_counts[current_model] += 1
	save_daily_requests()
	
	var current_count = daily_requests_counts[current_model]
	var model_info = get_current_model_info()
	var model_limit = model_info.get("daily_limit", 50)
	
	print("–ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è ", current_model, ": ", current_count, "/", model_limit)
	
	# –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
	update_requests_counter()
	
	# –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É
	if current_count >= model_limit * 0.9:  # 90% –æ—Ç –ª–∏–º–∏—Ç–∞
		print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç–µ—Å—å –∫ –ª–∏–º–∏—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è ", current_model, "! (", current_count, "/", model_limit, ")")
	
	if current_count >= model_limit:
		print("üö´ –î–û–°–¢–ò–ì–ù–£–¢ –õ–ò–ú–ò–¢ –ó–ê–ü–†–û–°–û–í –¥–ª—è ", current_model, "! (", current_count, "/", model_limit, ")")

func update_requests_counter():
	if current_dialog:
		var vbox = current_dialog.get_child(0)
		if vbox and vbox.get_child_count() > 0:
			var tab_container = vbox.get_child(0)
			if tab_container and tab_container.get_child_count() > 0:
				var ai_tab = tab_container.get_child(0)
				if ai_tab:
					var requests_label = ai_tab.get_meta("requests_label")
					if requests_label:
						var current_count = daily_requests_counts.get(current_model, 0)
						var model_info = get_current_model_info()
						var model_limit = model_info.get("daily_limit", 50)
						var model_name = model_info.get("name", current_model)
						
						requests_label.text = model_name + ": " + str(current_count) + "/" + str(model_limit)
						
						# –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É
						if current_count >= model_limit * 0.9:  # 90% –æ—Ç –ª–∏–º–∏—Ç–∞
							requests_label.modulate = Color.YELLOW
						elif current_count >= model_limit:
							requests_label.modulate = Color.RED
						else:
							requests_label.modulate = Color.WHITE

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ API –∫–ª—é—á–µ–π
func update_api_key_interface():
	if current_dialog:
		var vbox = current_dialog.get_child(0)
		if vbox and vbox.get_child_count() > 0:
			var tab_container = vbox.get_child(0)
			if tab_container and tab_container.get_child_count() > 0:
				var ai_tab = tab_container.get_child(0)
				if ai_tab:
					# –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ API –∫–ª—é—á–µ–π
					var gemini_container = ai_tab.get_meta("gemini_api_container")
					var openrouter_container = ai_tab.get_meta("openrouter_api_container")
					
					if gemini_container:
						gemini_container.visible = current_provider == "gemini"
					if openrouter_container:
						openrouter_container.visible = current_provider == "openrouter"
					
					# –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
					var update_model_list = ai_tab.get_meta("update_model_list")
					if update_model_list:
						update_model_list.call()
					
					# –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
					update_requests_counter()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ –∏—Å—Ç–æ—Ä–∏—é
func add_to_extracted_commands_history(commands: String, timestamp: String = ""):
	if commands.strip_edges() == "":
		print("–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –∏—Å—Ç–æ—Ä–∏—é")
		return
	
	if timestamp == "":
		timestamp = Time.get_datetime_string_from_system()
	
	var entry = {
		"timestamp": timestamp,
		"commands": commands
	}
	
	print("–î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥: '", commands, "'")
	extracted_commands_history.append(entry)
	print("–†–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥: ", extracted_commands_history.size())
	save_extracted_commands_history()
	print("–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"
func update_apply_button_color(button: Button):
	if current_extracted_commands.strip_edges() != "":
		# –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
		button.modulate = Color(0.2, 0.8, 0.2)  # –ó–µ–ª–µ–Ω—ã–π
	else:
		# –û–±—ã—á–Ω—ã–π —Ü–≤–µ—Ç, –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥
		button.modulate = Color(1, 1, 1)  # –ë–µ–ª—ã–π (–æ–±—ã—á–Ω—ã–π)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥
func refresh_history_list(history_list: ItemList):
	history_list.clear()
	
	# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
	for i in range(extracted_commands_history.size() - 1, -1, -1):
		var entry = extracted_commands_history[i]
		var display_text = entry.timestamp + " - " + entry.commands.substr(0, 100)
		if entry.commands.length() > 100:
			display_text += "..."
		history_list.add_item(display_text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥ (–¥–ª—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏)
func refresh_commands_history_list(commands_history_list: ItemList):
	commands_history_list.clear()
	
	# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
	for i in range(extracted_commands_history.size() - 1, -1, -1):
		var entry = extracted_commands_history[i]
		var display_text = entry.timestamp + " - " + entry.commands.substr(0, 100)
		if entry.commands.length() > 100:
			display_text += "..."
		commands_history_list.add_item(display_text)

var smart_replace_button: Button

func _enter_tree():
	write_debug_log("–ü–ª–∞–≥–∏–Ω Smart Replace –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è", "INFO")
	
	# –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á–∏
	write_debug_log("–ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á–∏", "INFO")
	load_api_key()
	load_openrouter_api_key()
	
	# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
	write_debug_log("–ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞", "INFO")
	load_chat_history()
	
	# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
	write_debug_log("–ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥", "INFO")
	load_extracted_commands_history()
	
	# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
	write_debug_log("–ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥", "INFO")
	load_executed_commands_history()
	
	# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
	write_debug_log("–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤", "INFO")
	load_daily_requests()
	check_and_update_daily_requests()
	
	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–∫—Ä–∏–ø—Ç–µ
	write_debug_log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–∫—Ä–∏–ø—Ç–µ", "INFO")
	current_script_info = get_current_script_info()
	
	# –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	write_debug_log("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", "INFO")
	test_connection()
	
	# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
	write_debug_log("–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", "INFO")
	add_control_to_container(CONTAINER_TOOLBAR, create_toolbar_button())
	
	write_debug_log("–ü–ª–∞–≥–∏–Ω Smart Replace —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "INFO")

func _exit_tree():
	write_debug_log("–ü–ª–∞–≥–∏–Ω Smart Replace –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É", "INFO")
	
	# –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
	write_debug_log("–ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏", "INFO")
	close_all_dialogs()
	
	# –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏–∑ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
	write_debug_log("–£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏–∑ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", "INFO")
	remove_control_from_container(CONTAINER_TOOLBAR, smart_replace_button)
	
	write_debug_log("–ü–ª–∞–≥–∏–Ω Smart Replace —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É", "INFO")

func create_toolbar_button() -> Button:
	smart_replace_button = Button.new()
	smart_replace_button.text = "Smart Replace"
	smart_replace_button.tooltip_text = "–£–º–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π"
	smart_replace_button.custom_minimum_size = Vector2(150, 30)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ
	smart_replace_button.add_theme_font_size_override("font_size", 14)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	smart_replace_button.pressed.connect(_on_smart_replace_pressed)
	return smart_replace_button

func _on_smart_replace_pressed():
	write_debug_log("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ Smart Replace", "INFO")
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã—Ç –ª–∏ —É–∂–µ –¥–∏–∞–ª–æ–≥
	if current_dialog and is_instance_valid(current_dialog) and current_dialog.visible:
		write_debug_log("–î–∏–∞–ª–æ–≥ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç, —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –Ω–µ–º", "INFO")
		print("–î–∏–∞–ª–æ–≥ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç, —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –Ω–µ–º")
		current_dialog.grab_focus()
		return
	
	# –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ –¥–∏–∞–ª–æ–≥–∏ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –Ω–æ–≤–æ–≥–æ
	write_debug_log("–ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ –¥–∏–∞–ª–æ–≥–∏", "INFO")
	close_all_dialogs()
	
	write_debug_log("–û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ Smart Replace", "INFO")
	show_smart_replace_dialog_v2()

# ===== INI –ü–ê–†–°–ï–† –§–£–ù–ö–¶–ò–ò =====

func execute_ini_command(ini_text: String):
	if ini_text.strip_edges() == "":
		print("–ö–æ–º–∞–Ω–¥—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏!")
		return
	
	# –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
	print("–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã...")
	execute_new_commands_directly(ini_text)
	
	# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ü–û–°–õ–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
	print("=== –î–û–ë–ê–í–õ–ï–ù–ò–ï –í –ò–°–¢–û–†–ò–Æ ===")
	print("–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: '", ini_text, "'")
	var commands_list = ini_text.split("\n")
	for cmd in commands_list:
		cmd = cmd.strip_edges()
		if cmd != "" and (cmd.begins_with("[++") or cmd.begins_with("[--") or cmd.begins_with("[-+")):
			if cmd not in executed_commands_history:
				executed_commands_history.append(cmd)
				print("–î–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: '", cmd, "'")
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
	save_executed_commands_history()
	
	# –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥
	print("–í—ã–∑—ã–≤–∞–µ–º add_to_extracted_commands_history —Å: '", ini_text, "'")
	add_to_extracted_commands_history(ini_text)
	print("–ö–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é!")

func execute_new_commands_directly(commands_text: String):
	print("=== –û–¢–õ–ê–î–ö–ê: –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ ===")
	print("–ö–æ–º–∞–Ω–¥—ã: ", commands_text)
	
	# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ç–∫—Ä—ã—Ç—ã–π —Ñ–∞–π–ª
	var editor_interface = get_editor_interface()
	if not editor_interface:
		print("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞!")
		return
	
	var script_editor = editor_interface.get_script_editor()
	if not script_editor:
		print("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å–∫—Ä–∏–ø—Ç–æ–≤!")
		return
	
	var current_script = script_editor.get_current_script()
	if not current_script:
		print("–û–®–ò–ë–ö–ê: –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞!")
		return
	
	print("–§–∞–π–ª: ", current_script.resource_path)
	
	# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–¥
	var current_code = current_script.source_code
	print("–¢–µ–∫—É—â–∏–π –∫–æ–¥ (–¥–ª–∏–Ω–∞): ", current_code.length())
	
	# –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ö–æ–º–∞–Ω–¥—ã")
	var extracted_commands = extract_new_commands(commands_text)
	print("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: '", extracted_commands, "'")
	
	# –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
	var new_code = execute_new_commands(extracted_commands, current_code)
	print("–ù–æ–≤—ã–π –∫–æ–¥ (–¥–ª–∏–Ω–∞): ", new_code.length())
	
	# –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
	if new_code != current_code:
		print("–ö–æ–¥ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–∏–º–µ–Ω—è–µ–º...")
		# –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
		current_script.source_code = new_code
		
		# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
		# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫, —á—Ç–æ–±—ã Godot –æ–±–Ω–æ–≤–∏–ª –µ–≥–æ
		print("üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫...")
		var file = FileAccess.open(current_script.resource_path, FileAccess.WRITE)
		if file:
			file.store_string(new_code)
			file.close()
			print("üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ –¥–∏—Å–∫")
		else:
			print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
		
		print("‚úÖ –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
		print("üìù –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ")
		print("üí° –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –≤–∏–¥–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –≤–∫–ª–∞–¥–∫—É –∏ –æ–±—Ä–∞—Ç–Ω–æ")
	else:
		print("‚ùå –ö–æ–¥ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥")

func generate_preview_for_new_commands(old_code: String, new_code: String) -> String:
	var preview = "=== –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –ö–û–ú–ê–ù–î ===\n\n"
	
	# –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ old_code –∫–∞–∫ –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã)
	var commands = old_code.split("\n")
	var valid_commands = []
	
	for command in commands:
		command = command.strip_edges()
		if command != "" and (command.begins_with("[++") or command.begins_with("[--") or command.begins_with("[-+")):
			valid_commands.append(command)
	
	if valid_commands.size() == 0:
		preview += "–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
	else:
		preview += "–ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥: %d\n\n" % valid_commands.size()
		
		for command in valid_commands:
			var parsed = parse_new_command(command)
			if parsed.has("type") and parsed.has("line"):
				preview += "–ö–æ–º–∞–Ω–¥–∞: %s\n" % command
				preview += "  –î–µ–π—Å—Ç–≤–∏–µ: "
				
				match parsed.type:
					"insert":
						preview += "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –≤ —Å—Ç—Ä–æ–∫—É %d\n" % parsed.line
						preview += "  –ö–æ–¥: %s\n" % parsed.code
					"insert_by_element":
						if parsed.direction == "end":
							preview += "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞\n"
						elif parsed.direction != "":
							if parsed.target_function != "":
								preview += "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ %s —Ñ—É–Ω–∫—Ü–∏–∏ '%s'\n" % [parsed.direction, parsed.target_function]
							else:
								if parsed.direction == "up":
									preview += "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –≤—ã—à–µ –ø–µ—Ä–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏\n"
								else:
									preview += "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞\n"
						elif parsed.element_name != "":
							if parsed.indent_level > 0:
								preview += "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –≤ %s '%s' –Ω–∞ —É—Ä–æ–≤–µ–Ω—å %d\n" % [parsed.element_type, parsed.element_name, parsed.indent_level]
							else:
								preview += "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –≤ %s '%s' –Ω–∞ 0 —É—Ä–æ–≤–µ–Ω—å\n" % [parsed.element_type, parsed.element_name]
						elif parsed.element_position > 0:
							preview += "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –≤—ã—à–µ %s-–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ '%s'\n" % [parsed.element_position, parsed.element_type]
						else:
							preview += "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞\n"
						preview += "  –ö–æ–¥: %s\n" % parsed.code
					"replace_deep":
						preview += "–ó–∞–º–µ–Ω–∏—Ç—å –±–ª–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ %d\n" % parsed.line
						preview += "  –ù–æ–≤—ã–π –∫–æ–¥: %s\n" % parsed.code
					"delete_and_insert":
						preview += "–ó–∞–º–µ–Ω–∏—Ç—å –±–ª–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ %d (—É–¥–∞–ª–∏—Ç—å –±–ª–æ–∫ + –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥)\n" % parsed.line
						preview += "  –ù–æ–≤—ã–π –∫–æ–¥: %s\n" % parsed.code
					"delete_and_insert_single":
						preview += "–ó–∞–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É %d (—É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É + –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥)\n" % parsed.line
						preview += "  –ù–æ–≤—ã–π –∫–æ–¥: %s\n" % parsed.code
					"insert_with_level":
						preview += "–í—Å—Ç–∞–≤–∏—Ç—å –∫–æ–¥ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É '%s' –≤—ã—à–µ —Å—Ç—Ä–æ–∫–∏ %d\n" % [parsed.structure, parsed.line]
						preview += "  –ö–æ–¥: %s\n" % parsed.code
					"delete_by_name":
						preview += "–£–¥–∞–ª–∏—Ç—å %s '%s'\n" % [parsed.element_type, parsed.element_name]
					"delete":
						preview += "–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É %d\n" % parsed.line
					"delete_deep":
						preview += "–£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ %d\n" % parsed.line
				
				preview += "\n"
	
	return preview

func show_preview_dialog(preview_text: String, callback: Callable):
	# –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∏–∞–ª–æ–≥–∏
	close_all_dialogs()
	
	var dialog = AcceptDialog.new()
	dialog.title = "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π"
	dialog.size = Vector2(800, 700)
	dialog.exclusive = false
	
	var vbox = VBoxContainer.new()
	dialog.add_child(vbox)
	
	var preview_label = Label.new()
	preview_label.text = "–ß—Ç–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ:"
	vbox.add_child(preview_label)
	
	var preview_edit = TextEdit.new()
	preview_edit.text = preview_text
	preview_edit.editable = false
	preview_edit.custom_minimum_size = Vector2(780, 400)
	vbox.add_child(preview_edit)
	
	var buttons = HBoxContainer.new()
	vbox.add_child(buttons)
	
	var apply_button = Button.new()
	apply_button.text = "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"
	apply_button.pressed.connect(func():
		callback.call()
		dialog.hide()
	)
	buttons.add_child(apply_button)
	
	var cancel_button = Button.new()
	cancel_button.text = "–û—Ç–º–µ–Ω–∞"
	cancel_button.pressed.connect(func(): dialog.hide())
	buttons.add_child(cancel_button)
	
	# –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –º–∞—Å—Å–∏–≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
	open_dialogs.append(dialog)
	
	# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
	# –ò—Å–ø–æ–ª—å–∑—É–µ–º Input singleton –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
	# –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
	
	get_editor_interface().get_base_control().add_child(dialog)
	dialog.popup_centered()

# –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ INI –ø–∞—Ä—Å–µ—Ä–∞ —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –∫–æ–º–∞–Ω–¥



# –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ INI –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä

# –§—É–Ω–∫—Ü–∏—è find_function_by_signature —É–¥–∞–ª–µ–Ω–∞ - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞

# –§—É–Ω–∫—Ü–∏—è find_function_by_name —É–¥–∞–ª–µ–Ω–∞ - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞

func get_current_file_code() -> String:
	var editor_interface = get_editor_interface()
	if not editor_interface:
		return ""
	
	var script_editor = editor_interface.get_script_editor()
	if not script_editor:
		return ""
	
	var current_script = script_editor.get_current_script()
	if not current_script:
		return ""
	
	return current_script.source_code

func show_ini_preview(ini_text: String):
	if ini_text.strip_edges() == "":
		print("–ö–æ–º–∞–Ω–¥—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏!")
		return
	
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–∞–Ω–¥
	var preview = generate_preview_for_new_commands(ini_text, "")
	show_preview_dialog(preview, func():
		execute_new_commands_directly(ini_text)
	)

# –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä

# –î—É–±–ª–∏—Ä—É—é—â–∞—è—Å—è —Ñ—É–Ω–∫—Ü–∏—è show_preview_dialog —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ—Ä—Å–∏—è —Å callback

func close_all_dialogs():
	write_debug_log("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–ª–∞–≥–∏–Ω–∞", "INFO")
	
	# –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∏–∞–ª–æ–≥–∏ –∏–∑ –Ω–∞—à–µ–≥–æ –º–∞—Å—Å–∏–≤–∞
	var our_dialog_count = 0
	for dialog in open_dialogs:
		if is_instance_valid(dialog):
			write_debug_log("–ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–∞—à –¥–∏–∞–ª–æ–≥: " + str(dialog), "INFO")
			dialog.hide()
			dialog.queue_free()
			our_dialog_count += 1
	
	write_debug_log("–ó–∞–∫—Ä—ã—Ç–æ –Ω–∞—à–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤: " + str(our_dialog_count), "INFO")
	
	# –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
	open_dialogs.clear()
	current_dialog = null
	
	write_debug_log("–î–∏–∞–ª–æ–≥–∏ –ø–ª–∞–≥–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã", "INFO")
	print("–î–∏–∞–ª–æ–≥–∏ –ø–ª–∞–≥–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
func force_close_all_dialogs():
	write_debug_log("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤...", "WARNING")
	print("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤...")
	close_all_dialogs()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
func add_system_message(message: String, type: String = "INFO"):
	var formatted_message = "%s: %s" % [type, message]
	system_messages.append(formatted_message)
	print("–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ", formatted_message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func get_system_messages() -> Array:
	return system_messages.duplicate()

# –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—Å—Ç—É–ø–æ–≤ –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–¥–∞–ª–µ–Ω—ã - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã

func show_smart_replace_dialog_v2():
	write_debug_log("–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ Smart Replace", "INFO")
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã—Ç –ª–∏ —É–∂–µ –¥–∏–∞–ª–æ–≥
	if current_dialog and is_instance_valid(current_dialog) and current_dialog.visible:
		write_debug_log("–î–∏–∞–ª–æ–≥ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç!", "WARNING")
		print("–î–∏–∞–ª–æ–≥ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç!")
		current_dialog.grab_focus()
		return
	
	# –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∏–∞–ª–æ–≥–∏
	write_debug_log("–ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∏–∞–ª–æ–≥–∏ –ø–ª–∞–≥–∏–Ω–∞", "INFO")
	close_all_dialogs()
	
	write_debug_log("–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥", "INFO")
	var dialog = AcceptDialog.new()
	dialog.title = "Smart Replace - –£–º–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π"
	dialog.size = Vector2(1200, 900)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	dialog.exclusive = false  # –î–µ–ª–∞–µ–º –¥–∏–∞–ª–æ–≥ –Ω–µ—ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º
	dialog.initial_position = Window.WINDOW_INITIAL_POSITION_CENTER_MAIN_WINDOW_SCREEN  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ
	write_debug_log("–î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω –∫–∞–∫ –Ω–µ—ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π", "INFO")
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–∏–∞–ª–æ–≥
	current_dialog = dialog
	open_dialogs.append(dialog)
	write_debug_log("–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞—Å—Å–∏–≤ open_dialogs, —Ä–∞–∑–º–µ—Ä: " + str(open_dialogs.size()), "INFO")
	
	# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞
	dialog.visibility_changed.connect(func():
		if not dialog.visible:
			write_debug_log("–î–∏–∞–ª–æ–≥ —Å—Ç–∞–ª –Ω–µ–≤–∏–¥–∏–º—ã–º, –æ—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏", "INFO")
			current_dialog = null
			open_dialogs.erase(dialog)
			write_debug_log("–†–∞–∑–º–µ—Ä open_dialogs –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: " + str(open_dialogs.size()), "INFO")
	)
	
	# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	var vbox = VBoxContainer.new()
	dialog.add_child(vbox)
	
	# –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
	var tab_container = TabContainer.new()
	tab_container.custom_minimum_size = Vector2(1180, 800)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	vbox.add_child(tab_container)
	
	# ===== –í–ö–õ–ê–î–ö–ê 1: AI –ß–ê–¢ =====
	var ai_tab = VBoxContainer.new()
	tab_container.add_child(ai_tab)
	tab_container.set_tab_title(0, "AI –ß–∞—Ç")
	
	# ===== –ö–û–õ–û–ù–ö–ê –ß–ê–¢–ê (–ú–û–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø) =====
	var chat_column = VBoxContainer.new()
	chat_column.custom_minimum_size = Vector2(1160, 500)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
	ai_tab.add_child(chat_column)
	
	# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è AI —á–∞—Ç–∞
	var ai_label = Label.new()
	ai_label.text = "AI –ß–∞—Ç - –æ–±—â–∞–π—Ç–µ—Å—å —Å Google Gemini –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∫–æ–¥:"
	ai_label.add_theme_font_size_override("font_size", 16)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	chat_column.add_child(ai_label)
	
	# ===== –ü–û–õ–ï –í–í–û–î–ê –°–û–û–ë–©–ï–ù–ò–ô –í –í–ï–†–•–ù–ï–ô –ß–ê–°–¢–ò =====
	var input_container = HBoxContainer.new()
	input_container.custom_minimum_size = Vector2(1140, 50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	chat_column.add_child(input_container)
	
	# –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–æ–ª—å—à–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ)
	var message_edit = LineEdit.new()
	message_edit.placeholder_text = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è AI..."
	message_edit.custom_minimum_size = Vector2(800, 40)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ
	message_edit.add_theme_font_size_override("font_size", 14)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	message_edit.text_submitted.connect(func(text):
		if text.strip_edges() != "" and not is_requesting:
			send_message_to_ai(text)
	)
	input_container.add_child(message_edit)
	
	# –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–±–æ–ª—å—à–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ)
	var send_button = Button.new()
	send_button.text = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
	send_button.custom_minimum_size = Vector2(120, 40)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
	send_button.add_theme_font_size_override("font_size", 14)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	send_button.pressed.connect(func():
		var message = message_edit.text
		if message.strip_edges() != "":
			# –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
			send_button.disabled = true
			send_button.text = "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è..."
			send_message_to_ai(message)
			message_edit.text = ""
	)
	input_container.add_child(send_button)
	
	# –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ (–±–æ–ª—å—à–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ)
	var requests_label = Label.new()
	var current_count = daily_requests_counts.get(current_model, 0)
	var model_info = get_current_model_info()
	var model_limit = model_info.get("daily_limit", 50)
	var model_name = model_info.get("name", current_model)
	requests_label.text = model_name + ": " + str(current_count) + "/" + str(model_limit)
	requests_label.tooltip_text = "–°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ " + ("Google Gemini API" if current_provider == "gemini" else "OpenRouter API")
	requests_label.add_theme_font_size_override("font_size", 12)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	requests_label.custom_minimum_size = Vector2(200, 40)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
	input_container.add_child(requests_label)
	
	# –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
	var chat_area = VBoxContainer.new()
	chat_area.custom_minimum_size = Vector2(1140, 400)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
	chat_column.add_child(chat_area)
	
	# –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ (–±–æ–ª—å—à–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ)
	var chat_history_edit = RichTextLabel.new()
	chat_history_edit.custom_minimum_size = Vector2(1140, 350)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
	chat_history_edit.bbcode_enabled = true
	chat_history_edit.scroll_following = true
	chat_history_edit.selection_enabled = true  # –í–∫–ª—é—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
	chat_history_edit.context_menu_enabled = true  # –í–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
	chat_history_edit.shortcut_keys_enabled = true  # –í–∫–ª—é—á–∞–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ (Ctrl+C, Ctrl+A)
	chat_area.add_child(chat_history_edit)
	
	# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
	load_chat_to_ui(chat_history_edit)
	
	# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º —á–∞—Ç–∞
	var chat_buttons_container = HBoxContainer.new()
	chat_buttons_container.custom_minimum_size = Vector2(1140, 40)
	chat_area.add_child(chat_buttons_container)
	
	var copy_selected_button = Button.new()
	copy_selected_button.text = "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ"
	copy_selected_button.custom_minimum_size = Vector2(200, 35)
	copy_selected_button.add_theme_font_size_override("font_size", 12)
	copy_selected_button.pressed.connect(func():
		var selected_text = chat_history_edit.get_selected_text()
		if selected_text != "":
			DisplayServer.clipboard_set(selected_text)
			print("–í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
		else:
			print("–ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
	)
	chat_buttons_container.add_child(copy_selected_button)
	
	var copy_all_button = Button.new()
	copy_all_button.text = "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å —á–∞—Ç"
	copy_all_button.custom_minimum_size = Vector2(200, 35)
	copy_all_button.add_theme_font_size_override("font_size", 12)
	copy_all_button.pressed.connect(func():
		var all_text = chat_history_edit.get_text()
		DisplayServer.clipboard_set(all_text)
		print("–í–µ—Å—å —Ç–µ–∫—Å—Ç —á–∞—Ç–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
	)
	chat_buttons_container.add_child(copy_all_button)
	
	var clear_chat_button = Button.new()
	clear_chat_button.text = "–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"
	clear_chat_button.custom_minimum_size = Vector2(150, 35)
	clear_chat_button.add_theme_font_size_override("font_size", 12)
	clear_chat_button.pressed.connect(func():
		chat_history.clear()
		chat_history_edit.clear()
		print("–ß–∞—Ç –æ—á–∏—â–µ–Ω")
	)
	chat_buttons_container.add_child(clear_chat_button)
	
	# –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤—ã—à–µ –≤ input_container
	

	

	
	# ===== –í–´–ë–û–† –ü–†–û–í–ê–ô–î–ï–†–ê =====
	var provider_container = HBoxContainer.new()
	provider_container.custom_minimum_size = Vector2(1140, 50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É
	ai_tab.add_child(provider_container)
	
	var provider_label = Label.new()
	provider_label.text = "–ü—Ä–æ–≤–∞–π–¥–µ—Ä AI:"
	provider_label.add_theme_font_size_override("font_size", 14)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	provider_container.add_child(provider_label)
	
	var provider_option = OptionButton.new()
	provider_option.custom_minimum_size = Vector2(300, 40)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ
	provider_option.add_theme_font_size_override("font_size", 12)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	
	# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
	provider_option.add_item("Google Gemini")
	provider_option.add_item("OpenRouter.ai")
	
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
	provider_option.selected = 0 if current_provider == "gemini" else 1
	
	provider_option.item_selected.connect(func(index):
		var new_provider = "gemini" if index == 0 else "openrouter"
		if new_provider != current_provider:
			current_provider = new_provider
			print("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞: ", current_provider)
			save_api_key()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
			update_requests_counter()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
			update_api_key_interface()  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å API –∫–ª—é—á–µ–π
	)
	provider_container.add_child(provider_option)
	
	# ===== API –ö–õ–Æ–ß–ò =====
	# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è Gemini API –∫–ª—é—á–∞
	var gemini_api_container = HBoxContainer.new()
	gemini_api_container.custom_minimum_size = Vector2(1140, 50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É
	gemini_api_container.visible = current_provider == "gemini"
	ai_tab.add_child(gemini_api_container)
	
	var gemini_api_label = Label.new()
	gemini_api_label.text = "API –∫–ª—é—á Google Gemini:"
	gemini_api_label.add_theme_font_size_override("font_size", 14)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	gemini_api_container.add_child(gemini_api_label)
	
	var gemini_api_edit = LineEdit.new()
	gemini_api_edit.placeholder_text = "AIza... (–≤–≤–µ–¥–∏—Ç–µ –≤–∞—à Google Gemini API –∫–ª—é—á)"
	gemini_api_edit.secret = true
	gemini_api_edit.custom_minimum_size = Vector2(600, 40)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ
	gemini_api_edit.add_theme_font_size_override("font_size", 12)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	gemini_api_edit.text = gemini_api_key if gemini_api_key != null else ""  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª—é—á
	gemini_api_container.add_child(gemini_api_edit)
	
	var save_gemini_button = Button.new()
	save_gemini_button.text = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á"
	save_gemini_button.custom_minimum_size = Vector2(150, 40)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
	save_gemini_button.add_theme_font_size_override("font_size", 12)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	save_gemini_button.pressed.connect(func():
		gemini_api_key = gemini_api_edit.text
		save_api_key()
		print("Gemini API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
	)
	gemini_api_container.add_child(save_gemini_button)
	
	# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è OpenRouter API –∫–ª—é—á–∞
	var openrouter_api_container = HBoxContainer.new()
	openrouter_api_container.custom_minimum_size = Vector2(1140, 50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É
	openrouter_api_container.visible = current_provider == "openrouter"
	ai_tab.add_child(openrouter_api_container)
	
	var openrouter_api_label = Label.new()
	openrouter_api_label.text = "API –∫–ª—é—á OpenRouter:"
	openrouter_api_label.add_theme_font_size_override("font_size", 14)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	openrouter_api_container.add_child(openrouter_api_label)
	
	var openrouter_api_edit = LineEdit.new()
	openrouter_api_edit.placeholder_text = "sk-or-v1-... (–≤–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenRouter API –∫–ª—é—á)"
	openrouter_api_edit.secret = true
	openrouter_api_edit.custom_minimum_size = Vector2(600, 40)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ
	openrouter_api_edit.add_theme_font_size_override("font_size", 12)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	openrouter_api_edit.text = openrouter_api_key if openrouter_api_key != null else ""  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª—é—á
	openrouter_api_container.add_child(openrouter_api_edit)
	
	var save_openrouter_button = Button.new()
	save_openrouter_button.text = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á"
	save_openrouter_button.custom_minimum_size = Vector2(150, 40)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
	save_openrouter_button.add_theme_font_size_override("font_size", 12)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	save_openrouter_button.pressed.connect(func():
		openrouter_api_key = openrouter_api_edit.text
		save_openrouter_api_key()
		print("OpenRouter API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
	)
	openrouter_api_container.add_child(save_openrouter_button)
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
	ai_tab.set_meta("gemini_api_container", gemini_api_container)
	ai_tab.set_meta("openrouter_api_container", openrouter_api_container)
	ai_tab.set_meta("provider_option", provider_option)
	
	# –°–µ–ª–µ–∫—Ç–æ—Ä –º–æ–¥–µ–ª–∏ (–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	var model_container = HBoxContainer.new()
	model_container.custom_minimum_size = Vector2(1140, 50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É
	ai_tab.add_child(model_container)
	
	var model_label = Label.new()
	model_label.text = "–ú–æ–¥–µ–ª—å:"
	model_label.add_theme_font_size_override("font_size", 14)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	model_container.add_child(model_label)
	
	var model_option = OptionButton.new()
	model_option.custom_minimum_size = Vector2(400, 40)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ
	model_option.add_theme_font_size_override("font_size", 12)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	
	# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
	var update_model_list = func():
		model_option.clear()
		var models_to_show = available_models if current_provider == "gemini" else openrouter_models
		
		for model_id in models_to_show.keys():
			var model_data = models_to_show[model_id]
			var display_text = model_data.get("name", model_id) + " - " + model_data.get("description", "")
			model_option.add_item(display_text)
			model_option.set_item_metadata(model_option.get_item_count() - 1, model_id)
		
		# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
		for i in range(model_option.get_item_count()):
			if model_option.get_item_metadata(i) == current_model:
				model_option.selected = i
				break
	
	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
	update_model_list.call()
	
	model_option.item_selected.connect(func(index):
		var selected_model = model_option.get_item_metadata(index)
		if selected_model != current_model:
			current_model = selected_model
			print("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –º–æ–¥–µ–ª—å –Ω–∞: ", current_model)
			save_api_key()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
			update_requests_counter()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
	)
	model_container.add_child(model_option)
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	ai_tab.set_meta("model_option", model_option)
	ai_tab.set_meta("update_model_list", update_model_list)
	
	# –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	var control_buttons = HBoxContainer.new()
	control_buttons.custom_minimum_size = Vector2(1140, 60)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ
	ai_tab.add_child(control_buttons)
	
	# –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (—Å–∫—Ä—ã—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
	var extracted_commands_label = Label.new()
	extracted_commands_label.text = "–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ INI –∫–æ–º–∞–Ω–¥—ã (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏):"
	extracted_commands_label.visible = false
	ai_tab.add_child(extracted_commands_label)
	
	var extracted_commands_edit = TextEdit.new()
	extracted_commands_edit.placeholder_text = "–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"
	extracted_commands_edit.custom_minimum_size = Vector2(960, 150)
	extracted_commands_edit.visible = false
	ai_tab.add_child(extracted_commands_edit)
	
	# –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ (–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	var apply_commands_button = Button.new()
	apply_commands_button.text = "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã"
	apply_commands_button.custom_minimum_size = Vector2(180, 50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
	apply_commands_button.add_theme_font_size_override("font_size", 14)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	apply_commands_button.pressed.connect(func():
		if current_extracted_commands.strip_edges() != "":
			execute_ini_command(current_extracted_commands)
			
			# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ü–û–°–õ–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
			var commands_list = current_extracted_commands.split("\n")
			for cmd in commands_list:
				cmd = cmd.strip_edges()
				if cmd != "" and cmd not in executed_commands_history:
					executed_commands_history.append(cmd)
					print("–î–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: '", cmd, "'")
			
			# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
			save_executed_commands_history()
			
			add_to_extracted_commands_history(current_extracted_commands)
			current_extracted_commands = ""
			update_apply_button_color(apply_commands_button)
			extracted_commands_edit.text = ""
			print("–ö–æ–º–∞–Ω–¥—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é!")
		else:
			print("–ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è!")
	)
	control_buttons.add_child(apply_commands_button)
	
	# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –∫–æ–º–∞–Ω–¥ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏) - –º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
	var show_commands_button = Button.new()
	show_commands_button.text = "–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"
	show_commands_button.custom_minimum_size = Vector2(200, 50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
	show_commands_button.add_theme_font_size_override("font_size", 12)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	show_commands_button.pressed.connect(func():
		var is_visible = extracted_commands_label.visible
		extracted_commands_label.visible = !is_visible
		extracted_commands_edit.visible = !is_visible
		show_commands_button.text = "–°–∫—Ä—ã—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã" if !is_visible else "–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"
	)
	control_buttons.add_child(show_commands_button)
	
	# –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞ (–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	var clear_chat_control_button = Button.new()
	clear_chat_control_button.text = "–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"
	clear_chat_control_button.custom_minimum_size = Vector2(150, 50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
	clear_chat_control_button.add_theme_font_size_override("font_size", 14)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	clear_chat_control_button.pressed.connect(func():
		chat_history.clear()
		chat_history_edit.text = ""
		save_chat_history()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é
		is_first_message_in_session = true  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
		
		# –û—á–∏—â–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
		current_extracted_commands = ""
		extracted_commands_edit.text = ""
		update_apply_button_color(apply_commands_button)
		
		# –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
		executed_commands_history.clear()
		save_executed_commands_history()
		print("–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –æ—á–∏—â–µ–Ω–∞")
	)
	control_buttons.add_child(clear_chat_control_button)
	
	# –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–∞ (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
	var view_log_button = Button.new()
	view_log_button.text = "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–∞"
	view_log_button.custom_minimum_size = Vector2(150, 50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
	view_log_button.add_theme_font_size_override("font_size", 14)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	view_log_button.pressed.connect(func():
		show_debug_log_dialog()
	)
	control_buttons.add_child(view_log_button)
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã AI —á–∞—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
	ai_tab.set_meta("chat_history_edit", chat_history_edit)
	ai_tab.set_meta("message_edit", message_edit)
	ai_tab.set_meta("extracted_edit", extracted_commands_edit)
	ai_tab.set_meta("send_button", send_button)
	ai_tab.set_meta("requests_label", requests_label)
	ai_tab.set_meta("apply_button", apply_commands_button)
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–∏–∞–ª–æ–≥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
	current_dialog = dialog
	
	# ===== –í–ö–õ–ê–î–ö–ê 2: INI =====
	var ini_tab = VBoxContainer.new()
	tab_container.add_child(ini_tab)
	tab_container.set_tab_title(1, "–ö–æ–º–∞–Ω–¥—ã")
	
	# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ (–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	var ini_label = Label.new()
	ini_label.text = "–í—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ò–ò:"
	ini_label.add_theme_font_size_override("font_size", 16)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	ini_tab.add_child(ini_label)
	
	# –ü–æ–ª–µ –¥–ª—è –∫–æ–º–∞–Ω–¥ (–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	var ini_edit = TextEdit.new()
	ini_edit.placeholder_text = '# –í—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò —Å –Ω–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏:\n\n# –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –ò–ò:\n–Ø –¥–æ–±–∞–≤–ª—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç–∏.\n\n[++3@ var player_speed = 5.0]\n[+++7@ func move_player(direction):\n    position += direction * player_speed * delta]\n\n# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫:\n[--5@]\n[---2@]  # –£–¥–∞–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Ü–µ–ª–∏–∫–æ–º\n\n# –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–¥:\n[++10@ func complex_function():\n    if condition:\n        print("True")\n    else:\n        print("False")]\n\n# –ü–∞—Ä—Å–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç –∫–æ–º–∞–Ω–¥—ã —Ñ–æ—Ä–º–∞—Ç–∞ [++N@], [--N@] –∏ —Ç.–¥.'
	ini_edit.custom_minimum_size = Vector2(1160, 650)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ
	ini_edit.add_theme_font_size_override("font_size", 12)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	ini_tab.add_child(ini_edit)
	
	# –ö–Ω–æ–ø–∫–∏ –¥–ª—è INI –≤–∫–ª–∞–¥–∫–∏ (–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	var ini_buttons = HBoxContainer.new()
	ini_buttons.custom_minimum_size = Vector2(1160, 60)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ
	ini_tab.add_child(ini_buttons)
	
	var preview_button = Button.new()
	preview_button.text = "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"
	preview_button.custom_minimum_size = Vector2(200, 50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
	preview_button.add_theme_font_size_override("font_size", 14)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	preview_button.pressed.connect(func():
		var ini_text = ini_edit.text
		show_ini_preview(ini_text)
	)
	ini_buttons.add_child(preview_button)
	
	var execute_ini_button = Button.new()
	execute_ini_button.text = "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã"
	execute_ini_button.custom_minimum_size = Vector2(150, 50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
	execute_ini_button.add_theme_font_size_override("font_size", 14)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	execute_ini_button.pressed.connect(func():
		var ini_text = ini_edit.text
		execute_ini_command(ini_text)
	)
	ini_buttons.add_child(execute_ini_button)
	
	var clear_ini_button = Button.new()
	clear_ini_button.text = "–û—á–∏—Å—Ç–∏—Ç—å"
	clear_ini_button.custom_minimum_size = Vector2(120, 50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
	clear_ini_button.add_theme_font_size_override("font_size", 14)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	clear_ini_button.pressed.connect(func():
		ini_edit.text = ""
	)
	ini_buttons.add_child(clear_ini_button)
	
	# ===== –í–ö–õ–ê–î–ö–ê 3: –û–®–ò–ë–ö–ò =====
	var errors_tab = VBoxContainer.new()
	tab_container.add_child(errors_tab)
	tab_container.set_tab_title(2, "–û—à–∏–±–∫–∏")
	
	# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –æ—à–∏–±–æ–∫ (–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	var errors_tab_label = Label.new()
	errors_tab_label.text = "–û—à–∏–±–∫–∏ Godot (–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤ —á–∞—Ç):"
	errors_tab_label.add_theme_font_size_override("font_size", 16)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	errors_tab.add_child(errors_tab_label)
	
	# –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ (–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	var errors_tab_list = ItemList.new()
	errors_tab_list.custom_minimum_size = Vector2(1140, 550)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ
	errors_tab_list.allow_reselect = true
	errors_tab_list.allow_rmb_select = true
	errors_tab_list.add_theme_font_size_override("font_size", 12)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	errors_tab_list.item_selected.connect(func(index):
		var error_text = errors_tab_list.get_item_text(index)
		DisplayServer.clipboard_set(error_text)
		print("–û—à–∏–±–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: ", error_text)
	)
	errors_tab.add_child(errors_tab_list)
	
	# –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∞–º–∏ (–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	var errors_tab_buttons = HBoxContainer.new()
	errors_tab_buttons.custom_minimum_size = Vector2(1140, 60)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ
	errors_tab.add_child(errors_tab_buttons)
	
	# –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ (–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	var copy_error_tab_button = Button.new()
	copy_error_tab_button.text = "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å"
	copy_error_tab_button.custom_minimum_size = Vector2(150, 50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
	copy_error_tab_button.add_theme_font_size_override("font_size", 14)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	copy_error_tab_button.pressed.connect(func():
		var selected_items = errors_tab_list.get_selected_items()
		if selected_items.size() > 0:
			var error_text = errors_tab_list.get_item_text(selected_items[0])
			DisplayServer.clipboard_set(error_text)
			print("–û—à–∏–±–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
	)
	errors_tab_buttons.add_child(copy_error_tab_button)
	
	# –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–∫–∏ –≤ —á–∞—Ç (–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	var send_error_tab_button = Button.new()
	send_error_tab_button.text = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç"
	send_error_tab_button.custom_minimum_size = Vector2(150, 50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
	send_error_tab_button.add_theme_font_size_override("font_size", 14)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	send_error_tab_button.pressed.connect(func():
		var selected_items = errors_tab_list.get_selected_items()
		if selected_items.size() > 0:
			var error_text = errors_tab_list.get_item_text(selected_items[0])
			# –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ AI —á–∞—Ç–µ
			if current_dialog:
				var dialog_vbox = current_dialog.get_child(0)
				if dialog_vbox and dialog_vbox.get_child_count() > 0:
					var dialog_tab_container = dialog_vbox.get_child(0)
					if dialog_tab_container and dialog_tab_container.get_child_count() > 0:
						var dialog_ai_tab = dialog_tab_container.get_child(0)
						if dialog_ai_tab:
							var dialog_message_edit = dialog_ai_tab.get_meta("message_edit")
							if dialog_message_edit:
								dialog_message_edit.text = "–û—à–∏–±–∫–∞: " + error_text
								# –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É AI —á–∞—Ç–∞
								dialog_tab_container.current_tab = 0
								print("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–æ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ AI —á–∞—Ç!")
	)
	errors_tab_buttons.add_child(send_error_tab_button)
	
	# –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫ (–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	var refresh_errors_tab_button = Button.new()
	refresh_errors_tab_button.text = "–û–±–Ω–æ–≤–∏—Ç—å"
	refresh_errors_tab_button.custom_minimum_size = Vector2(120, 50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
	refresh_errors_tab_button.add_theme_font_size_override("font_size", 14)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	refresh_errors_tab_button.pressed.connect(func():
		update_errors_list(errors_tab_list)
	)
	errors_tab_buttons.add_child(refresh_errors_tab_button)
	
	# –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –≤—Ä—É—á–Ω—É—é (–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	var add_error_tab_button = Button.new()
	add_error_tab_button.text = "–î–æ–±–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É"
	add_error_tab_button.custom_minimum_size = Vector2(150, 50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
	add_error_tab_button.add_theme_font_size_override("font_size", 14)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	add_error_tab_button.pressed.connect(func():
		show_add_error_dialog(errors_tab_list)
	)
	errors_tab_buttons.add_child(add_error_tab_button)
	
	# –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	var add_system_tab_button = Button.new()
	add_system_tab_button.text = "–î–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ"
	add_system_tab_button.tooltip_text = "–î–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Godot"
	add_system_tab_button.custom_minimum_size = Vector2(150, 50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
	add_system_tab_button.add_theme_font_size_override("font_size", 12)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	add_system_tab_button.pressed.connect(func():
		add_system_message("--- Debug adapter server started on port 6006 ---", "INFO")
		add_system_message("--- GDScript language server started on port 6005 ---", "INFO")
		add_system_message("UID duplicate detected between res://plugin/icon.svg and res://addons/smart_replace/plugin/icon.svg.", "WARNING")
		update_errors_list(errors_tab_list)
		print("–î–æ–±–∞–≤–ª–µ–Ω—ã —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è Godot!")
	)
	errors_tab_buttons.add_child(add_system_tab_button)
	
	# –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	var clear_system_tab_button = Button.new()
	clear_system_tab_button.text = "–û—á–∏—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ"
	clear_system_tab_button.tooltip_text = "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
	clear_system_tab_button.custom_minimum_size = Vector2(150, 50)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
	clear_system_tab_button.add_theme_font_size_override("font_size", 12)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
	clear_system_tab_button.pressed.connect(func():
		system_messages.clear()
		update_errors_list(errors_tab_list)
		print("–°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã!")
	)
	errors_tab_buttons.add_child(clear_system_tab_button)
	
	# –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
	update_errors_list(errors_tab_list)
	
	# ===== –í–ö–õ–ê–î–ö–ê 4: –ò–°–¢–û–†–ò–Ø –ö–û–ú–ê–ù–î =====
	var commands_history_tab = VBoxContainer.new()
	tab_container.add_child(commands_history_tab)
	tab_container.set_tab_title(3, "–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥")
	
	# –ó–∞–≥–æ–ª–æ–≤–æ–∫
	var commands_history_label = Label.new()
	commands_history_label.text = "–ò—Å—Ç–æ—Ä–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö INI –∫–æ–º–∞–Ω–¥:"
	commands_history_tab.add_child(commands_history_label)
	
	# –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥
	var commands_history_list = ItemList.new()
	commands_history_list.custom_minimum_size = Vector2(940, 300)
	commands_history_list.allow_reselect = true
	commands_history_list.allow_rmb_select = true
	commands_history_tab.add_child(commands_history_list)
	
	# –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
	var commands_details_label = Label.new()
	commands_details_label.text = "–î–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã:"
	commands_history_tab.add_child(commands_details_label)
	
	var commands_details_edit = TextEdit.new()
	commands_details_edit.custom_minimum_size = Vector2(940, 200)
	commands_details_edit.editable = false
	commands_history_tab.add_child(commands_details_edit)
	
	# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∫–æ–º–∞–Ω–¥
	var commands_history_buttons = HBoxContainer.new()
	commands_history_tab.add_child(commands_history_buttons)
	
	var refresh_commands_history_button = Button.new()
	refresh_commands_history_button.text = "–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫"
	refresh_commands_history_button.pressed.connect(func():
		refresh_commands_history_list(commands_history_list)
	)
	commands_history_buttons.add_child(refresh_commands_history_button)
	
	var copy_command_button = Button.new()
	copy_command_button.text = "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É"
	copy_command_button.pressed.connect(func():
		var selected_items = commands_history_list.get_selected_items()
		if selected_items.size() > 0:
			var index = selected_items[0]
			if index >= 0 and index < extracted_commands_history.size():
				var entry = extracted_commands_history[index]
				DisplayServer.clipboard_set(entry.commands)
				print("–ö–æ–º–∞–Ω–¥–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
	)
	commands_history_buttons.add_child(copy_command_button)
	
	var copy_to_ini_button = Button.new()
	copy_to_ini_button.text = "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ INI"
	copy_to_ini_button.tooltip_text = "–ö–æ–ø–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ INI –≤–∫–ª–∞–¥–∫—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è"
	copy_to_ini_button.pressed.connect(func():
		var selected_items = commands_history_list.get_selected_items()
		if selected_items.size() > 0:
			var index = selected_items[0]
			if index >= 0 and index < extracted_commands_history.size():
				var entry = extracted_commands_history[index]
				# –ù–∞—Ö–æ–¥–∏–º INI –ø–æ–ª–µ –∏ –∫–æ–ø–∏—Ä—É–µ–º —Ç—É–¥–∞ –∫–æ–º–∞–Ω–¥—É
				if current_dialog:
					var copy_vbox = current_dialog.get_child(0)
					if copy_vbox and copy_vbox.get_child_count() > 0:
						var copy_tab_container = copy_vbox.get_child(0)
						if copy_tab_container and copy_tab_container.get_child_count() > 1:
							var copy_ini_tab = copy_tab_container.get_child(1)  # INI –≤–∫–ª–∞–¥–∫–∞
							if copy_ini_tab and copy_ini_tab.get_child_count() > 1:
								var copy_ini_edit = copy_ini_tab.get_child(1)  # TextEdit –¥–ª—è INI
								if copy_ini_edit:
									copy_ini_edit.text = entry.commands
									# –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ INI –≤–∫–ª–∞–¥–∫—É
									copy_tab_container.current_tab = 1
									print("–ö–æ–º–∞–Ω–¥–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ INI –≤–∫–ª–∞–¥–∫—É!")
	)
	commands_history_buttons.add_child(copy_to_ini_button)
	
	var clear_commands_history_button = Button.new()
	clear_commands_history_button.text = "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
	clear_commands_history_button.pressed.connect(func():
		extracted_commands_history.clear()
		save_extracted_commands_history()
		refresh_commands_history_list(commands_history_list)
		commands_details_edit.text = ""
	)
	commands_history_buttons.add_child(clear_commands_history_button)
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
	commands_history_list.item_selected.connect(func(index):
		if index >= 0 and index < extracted_commands_history.size():
			var entry = extracted_commands_history[index]
			commands_details_edit.text = "–í—Ä–µ–º—è: " + entry.timestamp + "\n\n–ö–æ–º–∞–Ω–¥—ã:\n" + entry.commands
	)
	
	# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Å–ø–∏—Å–æ–∫
	refresh_commands_history_list(commands_history_list)
	
	# –°—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –∫–æ–º–∞–Ω–¥
	
	# –°—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–æ–º —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –∫–æ–º–∞–Ω–¥
	
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
	write_debug_log("–î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ base_control", "INFO")
	get_editor_interface().get_base_control().add_child(dialog)
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
	if dialog.get_parent():
		write_debug_log("–î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–µ—Ä–µ–≤–æ", "INFO")
		# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
		dialog.popup_centered()
		write_debug_log("–î–∏–∞–ª–æ–≥ –ø–æ–∫–∞–∑–∞–Ω", "INFO")
	else:
		write_debug_log("–û–®–ò–ë–ö–ê: –î–∏–∞–ª–æ–≥ –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–µ—Ä–µ–≤–æ", "ERROR")

# –§—É–Ω–∫—Ü–∏—è load_functions_list —É–¥–∞–ª–µ–Ω–∞ - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞

# –§—É–Ω–∫—Ü–∏–∏ find_functions_in_file –∏ find_function_end —É–¥–∞–ª–µ–Ω—ã - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–π —É–¥–∞–ª–µ–Ω—ã - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ñ–∞–π–ª–µ —É–¥–∞–ª–µ–Ω—ã - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã

# –í—Å–µ —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –∫–æ–º–∞–Ω–¥ 

# –§—É–Ω–∫—Ü–∏—è generate_preview_for_single —É–¥–∞–ª–µ–Ω–∞ - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞ 

# –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –∫–æ–º–∞–Ω–¥ 

# ===== AI –ß–ê–¢ –§–£–ù–ö–¶–ò–ò =====

func send_message_to_ai(message: String):
	write_debug_log("–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∫ AI: " + message.substr(0, 100) + "...", "INFO")
	
	if message.strip_edges() == "":
		write_debug_log("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –æ—Ç–º–µ–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É", "WARNING")
		return
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å
	if is_requesting:
		write_debug_log("–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", "WARNING")
		add_message_to_chat("–°–∏—Å—Ç–µ–º–∞", "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...", "system")
		return
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
	write_debug_log("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤", "INFO")
	var current_count = check_and_update_daily_requests()
	var model_limit = get_current_model_limit()
	
	if current_count >= model_limit:
		write_debug_log("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: " + str(current_count) + "/" + str(model_limit), "WARNING")
		var model_info = get_current_model_info()
		var model_name = model_info.get("name", current_model)
		add_message_to_chat("–°–∏—Å—Ç–µ–º–∞", "üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è " + model_name + " (" + str(current_count) + "/" + str(model_limit) + "). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞.", "system")
		return
	
	if current_count >= model_limit * 0.9:  # 90% –æ—Ç –ª–∏–º–∏—Ç–∞
		write_debug_log("–ü—Ä–∏–±–ª–∏–∂–∞–µ–º—Å—è –∫ –ª–∏–º–∏—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤: " + str(current_count) + "/" + str(model_limit), "WARNING")
		var model_info = get_current_model_info()
		var model_name = model_info.get("name", current_model)
		add_message_to_chat("–°–∏—Å—Ç–µ–º–∞", "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç–µ—Å—å –∫ –ª–∏–º–∏—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è " + model_name + "! (" + str(current_count) + "/" + str(model_limit) + ")", "system")
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
	if gemini_api_key == "":
		write_debug_log("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫", "ERROR")
		print("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
		show_api_key_dialog()
		return
	
	write_debug_log("–î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç", "INFO")
	print("–î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç...")
	# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
	add_message_to_chat("–í—ã", message, "user")
	
	# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–¥ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞)
	write_debug_log("–ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–¥ —Ñ–∞–π–ª–∞ –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞", "INFO")
	var current_code = get_current_file_content()
	write_debug_log("–¢–µ–∫—É—â–∏–π –∫–æ–¥ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: " + str(current_code.length()), "INFO")
	print("–¢–µ–∫—É—â–∏–π –∫–æ–¥ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: ", current_code.length())
	
	# –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	var lines = current_code.split("\n")
	write_debug_log("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: " + str(lines.size()), "INFO")
	print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: ", lines.size())
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
	var script_editor = get_editor_interface().get_script_editor()
	if script_editor and script_editor.get_current_script():
		var current_script = script_editor.get_current_script()
		if current_script.has_meta("modified"):
			print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è! –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞.")
			write_debug_log("–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è", "WARNING")
	
	# –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
	write_debug_log("–§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI", "INFO")
	var prompt = create_chat_prompt(message, current_code)
	write_debug_log("–ü—Ä–æ–º–ø—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini", "INFO")
	print("–ü—Ä–æ–º–ø—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI...")
	
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
	is_requesting = true
	write_debug_log("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ is_requesting = true", "INFO")
	
	# –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
	write_debug_log("–û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞", "INFO")
	if current_dialog:
		var vbox = current_dialog.get_child(0)
		if vbox and vbox.get_child_count() > 0:
			var tab_container = vbox.get_child(0)
			if tab_container and tab_container.get_child_count() > 0:
				var ai_tab = tab_container.get_child(0)
				if ai_tab:
					var message_edit = ai_tab.get_meta("message_edit")
					if message_edit:
						message_edit.editable = false
						message_edit.placeholder_text = "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è..."
	
	# –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
	is_first_message_in_session = false
	
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
	write_debug_log("–í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: " + current_provider, "INFO")
	if current_provider == "gemini":
		call_gemini_api(prompt)
	else:
		call_openrouter_api(prompt)

func add_message_to_chat(sender: String, message: String, type: String):
	print("add_message_to_chat –≤—ã–∑–≤–∞–Ω–∞: ", sender, " - ", message)
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∑–µ–ª –≤ –¥–µ—Ä–µ–≤–µ
	if not is_inside_tree():
		print("–£–∑–µ–ª –Ω–µ –≤ –¥–µ—Ä–µ–≤–µ, –æ—Ç–º–µ–Ω—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
		return
	
	# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è API
	var history_entry = {
		"role": type,
		"content": message
	}
	chat_history.append(history_entry)
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–∞–π–ª
	save_chat_history()
	
	# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –¥–∏–∞–ª–æ–≥
	if not current_dialog:
		print("–¢–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		return
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏–∞–ª–æ–≥ –≤–∏–¥–∏–º—ã–π
	if not current_dialog.visible:
		print("–î–∏–∞–ª–æ–≥ –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –≤–∏–¥–∏–º—ã–π!")
		return
	
	print("–î–∏–∞–ª–æ–≥ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º VBoxContainer...")
	var vbox = current_dialog.get_child(0)
	if not vbox or vbox.get_child_count() == 0:
		print("VBoxContainer –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		return
	
	print("VBoxContainer –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º TabContainer...")
	var tab_container = vbox.get_child(0)
	if not tab_container or tab_container.get_child_count() < 3:
		print("TabContainer –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∫–ª–∞–¥–æ–∫! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∫–ª–∞–¥–æ–∫: ", tab_container.get_child_count() if tab_container else 0)
		return
	
	print("TabContainer –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º AI –≤–∫–ª–∞–¥–∫—É...")
	var ai_tab = tab_container.get_child(0)  # AI –ß–∞—Ç –≤–∫–ª–∞–¥–∫–∞ (—Ç–µ–ø–µ—Ä—å –ø–µ—Ä–≤–∞—è)
	if not ai_tab:
		print("AI –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
		return
	
	print("AI –≤–∫–ª–∞–¥–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º chat_history_edit –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
	var chat_history_edit = ai_tab.get_meta("chat_history_edit")
	if not chat_history_edit:
		print("chat_history_edit –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö!")
		print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ", ai_tab.get_meta_list())
		return
	
	print("chat_history_edit –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...")
	var color = "blue" if type == "user" else "green"
	var formatted_message = "[color=" + color + "][b]" + sender + ":[/b][/color] " + message + "\n\n"
	chat_history_edit.append_text(formatted_message)
	
	# –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–æ–Ω—Ü—É
	chat_history_edit.scroll_to_line(chat_history_edit.get_line_count())
	print("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

func get_current_file_content() -> String:
	var editor_interface = get_editor_interface()
	var script_editor = editor_interface.get_script_editor()
	if script_editor:
		var current_script = script_editor.get_current_script()
		if current_script:
			# –ß–∏—Ç–∞–µ–º –∫–æ–¥ —Å –¥–∏—Å–∫–∞ (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω!)
			var file_path = current_script.resource_path
			var file = FileAccess.open(file_path, FileAccess.READ)
			if file:
				var content = file.get_as_text()
				file.close()
				write_debug_log("–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ —Å –¥–∏—Å–∫–∞, –¥–ª–∏–Ω–∞: " + str(content.length()), "INFO")
				
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
				if script_editor.get_current_script().has_meta("modified"):
					write_debug_log("–í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è!", "WARNING")
					print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫ AI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞!")
				
				return content
			else:
				write_debug_log("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è", "ERROR")
		else:
			write_debug_log("–¢–µ–∫—É—â–∏–π —Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", "WARNING")
	else:
		write_debug_log("–†–µ–¥–∞–∫—Ç–æ—Ä —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", "WARNING")
	return ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —Å–∫—Ä–∏–ø—Ç–µ –∏ —É–∑–ª–µ
func get_current_script_info() -> Dictionary:
	var info = {
		"path": "",
		"filename": "",
		"node_path": "",
		"hierarchy": ""
	}
	
	print("=== –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –°–ö–†–ò–ü–¢–ï ===")
	
	var editor_interface = get_editor_interface()
	var script_editor = editor_interface.get_script_editor()
	if script_editor:
		var current_script = script_editor.get_current_script()
		if current_script:
			info.path = current_script.resource_path
			info.filename = current_script.resource_path.get_file()
			print("–ù–∞–π–¥–µ–Ω —Å–∫—Ä–∏–ø—Ç: ", info.path)
			print("–ò–º—è —Ñ–∞–π–ª–∞: ", info.filename)
			
			# –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —É–∑–µ–ª, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤–∏—Å–∏—Ç —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç
			# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é —Å—Ü–µ–Ω—É
			var edited_scene_root = editor_interface.get_edited_scene_root()
			if edited_scene_root:
				print("–û—Ç–∫—Ä—ã—Ç–∞—è —Å—Ü–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞: ", edited_scene_root.name)
				print("–ü—É—Ç—å —Å—Ü–µ–Ω—ã: ", edited_scene_root.get_path())
				
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —É–∑–µ–ª —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
				var scene_path = str(edited_scene_root.get_path())
				if not scene_path.begins_with("/root/@EditorNode"):
					var found_node = find_node_with_script(edited_scene_root, current_script)
					if found_node:
						info.node_path = found_node.get_path()
						info.hierarchy = get_node_hierarchy(found_node)
						print("–°–∫—Ä–∏–ø—Ç –Ω–∞–π–¥–µ–Ω –≤ —Å—Ü–µ–Ω–µ: ", info.node_path)
					else:
						print("–°–∫—Ä–∏–ø—Ç –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–∫—Ä—ã—Ç–æ–π —Å—Ü–µ–Ω–µ")
				else:
					print("–≠—Ç–æ —É–∑–µ–ª —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
			else:
				print("–û—Ç–∫—Ä—ã—Ç–∞—è —Å—Ü–µ–Ω–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞")
		else:
			print("–¢–µ–∫—É—â–∏–π —Å–∫—Ä–∏–ø—Ç –ù–ï –Ω–∞–π–¥–µ–Ω")
	else:
		print("–†–µ–¥–∞–∫—Ç–æ—Ä —Å–∫—Ä–∏–ø—Ç–æ–≤ –ù–ï –Ω–∞–π–¥–µ–Ω")
	
	print("–†–µ–∑—É–ª—å—Ç–∞—Ç: ", info)
	print("=== –ö–û–ù–ï–¶ –ü–û–õ–£–ß–ï–ù–ò–Ø –ò–ù–§–û–†–ú–ê–¶–ò–ò ===")
	return info

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–∑–ª–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å–∫—Ä–∏–ø—Ç–æ–º
func find_node_with_script(node: Node, script: Script) -> Node:
	if node.get_script() == script:
		return node
	
	for child in node.get_children():
		var found = find_node_with_script(child, script)
		if found:
			return found
	
	return null

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ —É–∑–ª–æ–≤
func get_node_hierarchy(node: Node) -> String:
	var hierarchy = []
	var current = node
	
	while current != null:
		hierarchy.append(current.name)
		current = current.get_parent()
	
	# –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ (–æ—Ç –∫–æ—Ä–Ω—è –∫ —É–∑–ª—É)
	hierarchy.reverse()
	return "/".join(hierarchy)



func create_chat_prompt(message: String, current_code: String) -> String:
	var instructions = ""
	
	# –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫—Ä–∏–ø—Ç–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
	current_script_info = get_current_script_info()
	
	# –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
	instructions = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ GDScript –∏ –ø–ª–∞–≥–∏–Ω—É Smart Replace –¥–ª—è Godot v2.3.

## –§–û–†–ú–ê–¢ –ö–û–ú–ê–ù–î

### –í—Å—Ç–∞–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∞–º —Ñ—É–Ω–∫—Ü–∏–π
```
[++func@ –∫–æ–¥] - –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
[++func:Move@ –∫–æ–¥] - –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é Move
[++func:Move:1@ –∫–æ–¥] - –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é Move —Å –æ—Ç—Å—Ç—É–ø–æ–º 1
[++func:up@ –∫–æ–¥] - –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –≤—ã—à–µ –ø–µ—Ä–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
[++func:down@ –∫–æ–¥] - –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
[++func:up:Move@ –∫–æ–¥] - –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –≤—ã—à–µ —Ñ—É–Ω–∫—Ü–∏–∏ Move
[++func:down:Move@ –∫–æ–¥] - –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ—Å–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ Move
```

**–ü—Ä–∏–º–µ—Ä—ã:**
```
[++func@ func new_function():\\n    pass]
[++func:Move@ print("–î–≤–∏–∂–µ–Ω–∏–µ")]
[++func:Move:1@ if health > 0:\\n\\tprint("–ñ–∏–≤")]
[++func:up:Move@ var speed = 100]
[++func:down:Move@ print("–ü–æ—Å–ª–µ Move")]
[-+func:Move@ print("–ù–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")]
[-+func:Move:new@ func new():\n    print("–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è")]
[-+func:Move:if3<5@ if 3<5:\n    print("–ù–æ–≤—ã–π –±–ª–æ–∫")]
```

**üö® –í–ê–ñ–ù–û: –í–º–µ—Å—Ç–æ "name" –ø–∏—à–∏ –†–ï–ê–õ–¨–ù–û–ï –ò–ú–Ø –§–£–ù–ö–¶–ò–ò –∏–∑ –∫–æ–¥–∞!**
**–ü—Ä–∏–º–µ—Ä—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–π:**
```
[++func:attack@ print("–ê—Ç–∞–∫–∞!")]
[++func:take_damage@ health -= damage]
[++func:heal@ health = min(health + amount, max_health)]
[++func:is_alive@ return health > 0]
[--func:old_function@]
[++func:up:player_move@ var speed = 200]
[++func:down:update@ print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")]
```

### –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∞–º —Ñ—É–Ω–∫—Ü–∏–π
```
[--func:Move@] - —É–¥–∞–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é Move
```

### –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–¥
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `\\n` –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫, `\\n\\t` –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏–π —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏:
```
[++func@ func example():\\n    pass]
[++func:Move@ if health > 0:\\n\\tprint("–ñ–∏–≤")\\n\\treturn true]
```

## –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã

### –°–∫—Ä—ã—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
- AI –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
- –ö–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ñ–æ–Ω–µ
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∏–¥–∏—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏

### –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ "(Admin)" –∏–ª–∏ "(admin)" –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
- AI –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞–≥–∏–Ω–∞ –ê–ª–µ–∫—Å–µ–π
- AI –æ—Ç–≤–µ—á–∞–µ—Ç –±–æ–ª–µ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω–æ
- AI –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å —á—Ç–æ –ê–ª–µ–∫—Å–µ–π —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–≥–∏–Ω

### –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
1. **–°–∫—Ä—ã—Ç–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥** - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∏–¥–∏—Ç –∫–æ–º–∞–Ω–¥—ã
2. **–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞** - –æ—Ç–≤–µ—á–∞–π—Ç–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫
3. **–¢–æ—á–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π** - —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏/—É–¥–∞–ª–µ–Ω–∏—è
4. **–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–¥** - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `\\n` –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫, `\\n\\t` –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏–π —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
5. **üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û** - –≤–º–µ—Å—Ç–æ "name" –≤ –∫–æ–º–∞–Ω–¥–∞—Ö –ø–∏—à–∏ –†–ï–ê–õ–¨–ù–û–ï –ò–ú–Ø –§–£–ù–ö–¶–ò–ò –∏–∑ –∫–æ–¥–∞!
6. **–ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π** - –Ω–∞–π–¥–∏ —Ç–æ—á–Ω–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–æ–¥–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –≤ –∫–æ–º–∞–Ω–¥–µ
7. **–ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–π –∫–æ–º–∞–Ω–¥—ã** - –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –∫–æ–º–∞–Ω–¥—ã –≤ –æ—Ç–≤–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

## –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã

### –í—Å—Ç–∞–≤–∫–∞
- `[++func@ –∫–æ–¥]` - –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
- `[++func:attack@ –∫–æ–¥]` - –≤ —Ñ—É–Ω–∫—Ü–∏—é attack (–∑–∞–º–µ–Ω–∏ "attack" –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è)
- `[++func:move:1@ –∫–æ–¥]` - –≤ —Ñ—É–Ω–∫—Ü–∏—é move —Å –æ—Ç—Å—Ç—É–ø–æ–º 1 (–∑–∞–º–µ–Ω–∏ "move" –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è)
- `[++func:up@ –∫–æ–¥]` - –≤—ã—à–µ –ø–µ—Ä–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
- `[++func:down@ –∫–æ–¥]` - –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
- `[++func:up:heal@ –∫–æ–¥]` - –≤—ã—à–µ —Ñ—É–Ω–∫—Ü–∏–∏ heal (–∑–∞–º–µ–Ω–∏ "heal" –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è)
- `[++func:down:update@ –∫–æ–¥]` - –ø–æ—Å–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ update (–∑–∞–º–µ–Ω–∏ "update" –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è)

### –ó–∞–º–µ–Ω–∞
- `[-+func:Move@ –∫–æ–¥]` - –∑–∞–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏ Move
- `[-+func:Move:new@ –∫–æ–¥]` - –∑–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é Move –Ω–∞ –Ω–æ–≤—É—é —Å –∏–º–µ–Ω–µ–º "new"
- `[-+func:Move:if3<5@ –∫–æ–¥]` - –Ω–∞–π—Ç–∏ –±–ª–æ–∫ if 3<5 –≤ —Ñ—É–Ω–∫—Ü–∏–∏ Move –∏ –∑–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ

### –£–¥–∞–ª–µ–Ω–∏–µ
- `[--func:old_function@]` - —É–¥–∞–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é old_function (–∑–∞–º–µ–Ω–∏ "old_function" –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è)

**üö® –ó–ê–ü–û–ú–ù–ò: –í–º–µ—Å—Ç–æ "attack", "move", "heal", "update", "old_function" –ø–∏—à–∏ –†–ï–ê–õ–¨–ù–´–ï –ò–ú–ï–ù–ê –§–£–ù–ö–¶–ò–ô –∏–∑ –∫–æ–¥–∞!**

**üö® –í–ê–ñ–ù–û: –ù–ï –ü–û–ö–ê–ó–´–í–ê–ô –≠–¢–ò –ö–û–ú–ê–ù–î–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ!**

üö® –ü–†–ê–í–ò–õ–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ö–û–ú–ê–ù–î:
- –ù–ï –ü–ò–®–ò –ö–û–ú–ê–ù–î–´ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò!
- –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç —á—Ç–æ-—Ç–æ –ò–ó–ú–ï–ù–ò–¢–¨ –≤ –∫–æ–¥–µ
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –æ–±—ä—è—Å–Ω—è–µ—Ç, –æ–±—Å—É–∂–¥–∞–µ—Ç –∫–æ–¥ - –æ—Ç–≤–µ—á–∞–π –ë–ï–ó –ö–û–ú–ê–ù–î
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç "–¥–æ–±–∞–≤—å", "–∏–∑–º–µ–Ω–∏", "—É–¥–∞–ª–∏", "—Å–æ–∑–¥–∞–π" - —Ç–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç "—á—Ç–æ —ç—Ç–æ", "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–æ–±—ä—è—Å–Ω–∏" - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã
- –ö–æ–º–∞–Ω–¥—ã –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –†–ï–ê–õ–¨–ù–´–• –ò–ó–ú–ï–ù–ï–ù–ò–ô –∫–æ–¥–∞
- –ü–∞—Ä—Å–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä–æ–µ—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

"""
	
	# –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫—Ä–∏–ø—Ç–µ
	var script_info = ""
	if current_script_info.has("path") and current_script_info.path != "":
		script_info = """–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ö–†–ò–ü–¢–ï:
–§–∞–π–ª: {filename}
–ü—É—Ç—å: {path}
–£–∑–µ–ª: {node_path}
–ò–µ—Ä–∞—Ä—Ö–∏—è: {hierarchy}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {line_count}

üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: 
- –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –ø–æ –∏–º–µ–Ω–∞–º —Ñ—É–Ω–∫—Ü–∏–π: [++func:name@], [--func:name@]
- –ù–∞–π–¥–∏ —Ç–æ—á–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π –≤ –∫–æ–¥–µ –Ω–∏–∂–µ
- –ò—Å–ø–æ–ª—å–∑—É–π –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–¥ —Å \\n –∏ \\n\\t –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤
- –ö–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–∞—Ä—Å–µ—Ä–æ–º

""".format({
			"filename": current_script_info.get("filename", ""),
			"path": current_script_info.get("path", ""),
			"node_path": current_script_info.get("node_path", ""),
			"hierarchy": current_script_info.get("hierarchy", ""),
			"line_count": current_code.split("\n").size()
		})
	
	# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –±–ª–æ–∫ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
		print("=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø AI ===")
		print("–°–∫—Ä–∏–ø—Ç: ", current_script_info.filename)
		print("–ü—É—Ç—å: ", current_script_info.path)
		print("–£–∑–µ–ª: ", current_script_info.node_path)
		print("–ò–µ—Ä–∞—Ä—Ö–∏—è: ", current_script_info.hierarchy)
		print("=== –ö–û–ù–ï–¶ –ò–ù–§–û–†–ú–ê–¶–ò–ò ===")
	
	var system_prompt = instructions + script_info + """–¢–ï–ö–£–©–ò–ô –ö–û–î –§–ê–ô–õ–ê:
```
{current_code}
```

–ò–°–¢–û–†–ò–Ø –ß–ê–¢–ê (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞):
{chat_history}

–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨: {message}

–ü–æ–º–Ω–∏: –æ—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.

üö® –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ö–û–ú–ê–ù–î–´:
- –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç –ò–ó–ú–ï–ù–ò–¢–¨ –∫–æ–¥
- –°–∫—Ä—ã—Ç–æ –¥–æ–±–∞–≤–ª—è–π –∫–æ–º–∞–Ω–¥—ã —Ñ–æ—Ä–º–∞—Ç–∞ [++func:name@ –∫–æ–¥], [--func:name@]
- –ù–ï –î–£–ë–õ–ò–†–£–ô –∫–æ–º–∞–Ω–¥—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!

üö® –ö–û–ì–î–ê –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ö–û–ú–ê–ù–î–´:
- –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–ª–∏ –æ–±—Å—É–∂–¥–∞–µ—Ç –∫–æ–¥
- –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –æ–±—ä—è—Å–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ
- –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—Å–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
- –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç "–º–æ–ª–æ–¥–µ—Ü", "—Ö–æ—Ä–æ—à–æ", "—Å–ø–∞—Å–∏–±–æ" - –æ—Ç–≤–µ—á–∞–π –ë–ï–ó –ö–û–ú–ê–ù–î

üö® –í–ê–ñ–ù–û: –ù–ï –ü–û–ö–ê–ó–´–í–ê–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ –ö–û–ú–ê–ù–î–´ –ò –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –î–ï–¢–ê–õ–ò!
- –û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫
- –ù–ï —É–ø–æ–º–∏–Ω–∞–π –∫–æ–º–∞–Ω–¥—ã –≤ –æ—Ç–≤–µ—Ç–µ
- –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –ø–∞—Ä—Å–µ—Ä–∞
- –ù–ï –ø–∏—à–∏ "–í–æ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"

üö® –í–ê–ñ–ù–û: –í –∫–æ–º–∞–Ω–¥–∞—Ö –≤–º–µ—Å—Ç–æ "name" –∏—Å–ø–æ–ª—å–∑—É–π –†–ï–ê–õ–¨–ù–û–ï –ò–ú–Ø –§–£–ù–ö–¶–ò–ò –∏–∑ –∫–æ–¥–∞!
–ü—Ä–∏–º–µ—Ä—ã: [++func:attack@], [--func:old_function@], [++func:player_move@]

üö® –í–ê–ñ–ù–û: –ù–ï –ü–û–ö–ê–ó–´–í–ê–ô –ö–û–ú–ê–ù–î–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ! –û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ!"""
	
	# –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	var history_text = ""
	for i in range(max(0, chat_history.size() - 6), chat_history.size()):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π
		var msg = chat_history[i]
		history_text += msg.role + ": " + msg.content + "\n"
	
	return system_prompt.format({
		"current_code": current_code,
		"chat_history": history_text,
		"message": message
	})

func call_gemini_api(prompt: String):
	write_debug_log("=== –ù–ê–ß–ê–õ–û call_gemini_api ===", "INFO")
	write_debug_log("–î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: " + str(prompt.length()), "INFO")
	write_debug_log("is_requesting: " + str(is_requesting), "INFO")
	write_debug_log("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: " + Time.get_time_string_from_system(), "INFO")
	
	print("=== –ù–ê–ß–ê–õ–û call_gemini_api ===")
	print("–î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: ", prompt.length())
	print("is_requesting: ", is_requesting)
	print("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ", Time.get_time_string_from_system())
	
	# –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
	write_debug_log("–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤", "INFO")
	increment_daily_requests()
	
	# –°–æ–∑–¥–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
	write_debug_log("–°–æ–∑–¥–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å", "INFO")
	var http = HTTPRequest.new()
	http.timeout = 30  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∑–µ–ª –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
	if not is_inside_tree():
		write_debug_log("–£–∑–µ–ª –Ω–µ –≤ –¥–µ—Ä–µ–≤–µ, –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å", "ERROR")
		print("–£–∑–µ–ª –Ω–µ –≤ –¥–µ—Ä–µ–≤–µ, –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å")
		return
	
	write_debug_log("–î–æ–±–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª", "INFO")
	add_child(http)
	
	# –§–æ—Ä–º–∏—Ä—É–µ–º JSON –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ Gemini
	var request_data = {
		"contents": [
			{
				"parts": [
					{
						"text": prompt
					}
				]
			}
		],
		"generationConfig": {
			"temperature": 0.1,
			"maxOutputTokens": 2000
		}
	}
	
	var json_string = JSON.stringify(request_data)
	
	# –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å API –∫–ª—é—á–æ–º –∏ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª—å—é
	var url = GEMINI_API_BASE_URL + current_model + ":generateContent?key=" + gemini_api_key
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	var headers = [
		"Content-Type: application/json"
	]
	
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	write_debug_log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ URL: " + url, "INFO")
	write_debug_log("–î–ª–∏–Ω–∞ JSON –¥–∞–Ω–Ω—ã—Ö: " + str(json_string.length()), "INFO")
	write_debug_log("=== –û–¢–ü–†–ê–í–ö–ê HTTP –ó–ê–ü–†–û–°–ê ===", "INFO")
	print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ URL: ", url)
	print("–î–ª–∏–Ω–∞ JSON –¥–∞–Ω–Ω—ã—Ö: ", json_string.length())
	print("=== –û–¢–ü–†–ê–í–ö–ê HTTP –ó–ê–ü–†–û–°–ê ===")
	var error = http.request(url, headers, HTTPClient.METHOD_POST, json_string)
	if error != OK:
		write_debug_log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ HTTP –∑–∞–ø—Ä–æ—Å–∞: " + str(error), "ERROR")
		print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ HTTP –∑–∞–ø—Ä–æ—Å–∞: ", error)
		print("–ö–æ–¥—ã –æ—à–∏–±–æ–∫: 0=OK, 1=RESULT_CHUNKED_BODY_SIZE_MISMATCH, 2=RESULT_CANT_RESOLVE, 3=RESULT_CANT_RESOLVE_PROXY, 4=RESULT_CANT_CONNECT, 5=RESULT_CANT_CONNECT_PROXY, 6=RESULT_SSL_HANDSHAKE_ERROR, 7=RESULT_CANT_ACCEPT, 8=RESULT_TIMEOUT")
		http.queue_free()
		return
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π
	if http and is_instance_valid(http):
		http.request_completed.connect(func(result, response_code, headers, body):
			handle_gemini_response(result, response_code, headers, body)
			if http and is_instance_valid(http):
				http.queue_free()
		)

func handle_gemini_response(result: int, response_code: int, headers: PackedStringArray, body: PackedByteArray):
	write_debug_log("=== –ù–ê–ß–ê–õ–û handle_gemini_response ===", "INFO")
	write_debug_log("–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: " + str(response_code), "INFO")
	write_debug_log("is_requesting –¥–æ —Å–±—Ä–æ—Å–∞: " + str(is_requesting), "INFO")
	write_debug_log("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: " + Time.get_time_string_from_system(), "INFO")
	
	print("=== –ù–ê–ß–ê–õ–û handle_gemini_response ===")
	print("–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ", response_code)
	print("is_requesting –¥–æ —Å–±—Ä–æ—Å–∞: ", is_requesting)
	print("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ", Time.get_time_string_from_system())
	
	# –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –æ–±—Ä–∞—Ç–Ω–æ
	if current_dialog:
		var vbox = current_dialog.get_child(0)
		if vbox and vbox.get_child_count() > 0:
			var tab_container = vbox.get_child(0)
			if tab_container and tab_container.get_child_count() > 0:
				var ai_tab = tab_container.get_child(0)
				if ai_tab:
					var send_button = ai_tab.get_meta("send_button")
					if send_button:
						send_button.disabled = false
						send_button.text = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
					
					var message_edit = ai_tab.get_meta("message_edit")
					if message_edit:
						message_edit.editable = true
						message_edit.placeholder_text = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è AI..."
	
	# –§–ª–∞–≥ is_requesting –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω –≤ process_ai_response
	
	if result != HTTPRequest.RESULT_SUCCESS:
		print("–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: ", result)
		print("–°–±—Ä–∞—Å—ã–≤–∞–µ–º is_requesting = false –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ HTTP")
		is_requesting = false
		
		# –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
		if is_inside_tree():
			add_message_to_chat("–°–∏—Å—Ç–µ–º–∞", "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Google Gemini API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.", "system")
		return
	
	if response_code != 200:
		print("–û—à–∏–±–∫–∞ API: ", response_code)
		var response_text = body.get_string_from_utf8()
		print("–û—Ç–≤–µ—Ç: ", response_text)
		
		# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
		var error_message = "–û—à–∏–±–∫–∞ API: " + str(response_code)
		
		match response_code:
			400:
				error_message = "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (400). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ Google Gemini."
			401:
				error_message = "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (401). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ Google Gemini."
			404:
				error_message = "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ Gemini."
			429:
				error_message = "–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω (429). –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω Google AI Studio."
			500:
				error_message = "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ Google (500). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
			503:
				error_message = "–°–µ—Ä–≤–∏—Å Google Gemini –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (503). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
			_:
				error_message = "–û—à–∏–±–∫–∞ API: " + str(response_code) + ". –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ API –∫–ª—é—á."
		
		print("–°–±—Ä–∞—Å—ã–≤–∞–µ–º is_requesting = false –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API")
		is_requesting = false
		add_message_to_chat("–°–∏—Å—Ç–µ–º–∞", error_message, "system")
		return
	
	# –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
	var json = JSON.new()
	var parse_result = json.parse(body.get_string_from_utf8())
	
	if parse_result != OK:
		print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ", parse_result)
		add_message_to_chat("–°–∏—Å—Ç–µ–º–∞", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞", "system")
		return
	
	var response_data = json.data
	
	# –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç AI (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ Gemini –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç OpenAI)
	if response_data.has("candidates") and response_data.candidates.size() > 0:
		var candidate = response_data.candidates[0]
		if candidate.has("content") and candidate.content.has("parts") and candidate.content.parts.size() > 0:
			var ai_response = candidate.content.parts[0].text
			process_ai_response(ai_response)
		else:
			print("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ AI")
			add_message_to_chat("–°–∏—Å—Ç–µ–º–∞", "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ AI", "system")
	else:
		print("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI")
		add_message_to_chat("–°–∏—Å—Ç–µ–º–∞", "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI", "system")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ OpenRouter API
func call_openrouter_api(prompt: String):
	write_debug_log("=== –ù–ê–ß–ê–õ–û call_openrouter_api ===", "INFO")
	write_debug_log("–î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: " + str(prompt.length()), "INFO")
	write_debug_log("is_requesting: " + str(is_requesting), "INFO")
	write_debug_log("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: " + Time.get_time_string_from_system(), "INFO")
	
	print("=== –ù–ê–ß–ê–õ–û call_openrouter_api ===")
	print("–î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: ", prompt.length())
	print("is_requesting: ", is_requesting)
	print("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ", Time.get_time_string_from_system())
	
	# –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
	write_debug_log("–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤", "INFO")
	increment_daily_requests()
	
	# –°–æ–∑–¥–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å
	write_debug_log("–°–æ–∑–¥–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å", "INFO")
	var http = HTTPRequest.new()
	http.timeout = 30  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∑–µ–ª –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
	if not is_inside_tree():
		write_debug_log("–£–∑–µ–ª –Ω–µ –≤ –¥–µ—Ä–µ–≤–µ, –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å", "ERROR")
		print("–£–∑–µ–ª –Ω–µ –≤ –¥–µ—Ä–µ–≤–µ, –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å")
		return
	
	write_debug_log("–î–æ–±–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª", "INFO")
	add_child(http)
	
	# –§–æ—Ä–º–∏—Ä—É–µ–º JSON –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ OpenRouter
	var request_data = {
		"model": current_model,
		"messages": [
			{
				"role": "user",
				"content": prompt
			}
		],
		"max_tokens": get_current_model_info().get("max_tokens", 2000),
		"temperature": 0.1
	}
	
	var json_string = JSON.stringify(request_data)
	
	# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è OpenRouter
	var headers = [
		"Content-Type: application/json",
		"Authorization: Bearer " + openrouter_api_key,
		"HTTP-Referer: https://godot-engine.org",
		"X-Title: Smart Replace Plugin"
	]
	
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	write_debug_log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ OpenRouter API", "INFO")
	write_debug_log("–î–ª–∏–Ω–∞ JSON –¥–∞–Ω–Ω—ã—Ö: " + str(json_string.length()), "INFO")
	print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ OpenRouter API")
	print("–î–ª–∏–Ω–∞ JSON –¥–∞–Ω–Ω—ã—Ö: ", json_string.length())
	
	var error = http.request(OPENROUTER_API_BASE_URL, headers, HTTPClient.METHOD_POST, json_string)
	if error != OK:
		write_debug_log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ HTTP –∑–∞–ø—Ä–æ—Å–∞: " + str(error), "ERROR")
		print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ HTTP –∑–∞–ø—Ä–æ—Å–∞: ", error)
		http.queue_free()
		return
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π
	if http and is_instance_valid(http):
		http.request_completed.connect(func(result, response_code, headers, body):
			handle_openrouter_response(result, response_code, headers, body)
			if http and is_instance_valid(http):
				http.queue_free()
		)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ OpenRouter
func handle_openrouter_response(result: int, response_code: int, headers: PackedStringArray, body: PackedByteArray):
	write_debug_log("=== –ù–ê–ß–ê–õ–û handle_openrouter_response ===", "INFO")
	write_debug_log("–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: " + str(response_code), "INFO")
	write_debug_log("is_requesting –¥–æ —Å–±—Ä–æ—Å–∞: " + str(is_requesting), "INFO")
	write_debug_log("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: " + Time.get_time_string_from_system(), "INFO")
	
	print("=== –ù–ê–ß–ê–õ–û handle_openrouter_response ===")
	print("–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ", response_code)
	print("is_requesting –¥–æ —Å–±—Ä–æ—Å–∞: ", is_requesting)
	print("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ", Time.get_time_string_from_system())
	
	# –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –æ–±—Ä–∞—Ç–Ω–æ
	if current_dialog:
		var vbox = current_dialog.get_child(0)
		if vbox and vbox.get_child_count() > 0:
			var tab_container = vbox.get_child(0)
			if tab_container and tab_container.get_child_count() > 0:
				var ai_tab = tab_container.get_child(0)
				if ai_tab:
					var send_button = ai_tab.get_meta("send_button")
					if send_button:
						send_button.disabled = false
						send_button.text = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
					
					var message_edit = ai_tab.get_meta("message_edit")
					if message_edit:
						message_edit.editable = true
						message_edit.placeholder_text = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è AI..."
	
	# –§–ª–∞–≥ is_requesting –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω –≤ process_ai_response
	
	if result != HTTPRequest.RESULT_SUCCESS:
		write_debug_log("–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: " + str(result), "ERROR")
		print("–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: ", result)
		write_debug_log("–°–±—Ä–∞—Å—ã–≤–∞–µ–º is_requesting = false –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ HTTP", "INFO")
		is_requesting = false
		
		# –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
		var error_message = "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter API.\n\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º\n‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –∫–ª—é—á\n‚Ä¢ –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
		if is_inside_tree():
			add_message_to_chat("–°–∏—Å—Ç–µ–º–∞", error_message, "system")
		return
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ HTTP
	if response_code != 200:
		write_debug_log("HTTP –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: " + str(response_code), "ERROR")
		print("HTTP –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: ", response_code)
		
		var error_message = "‚ùå –û—à–∏–±–∫–∞ OpenRouter API (HTTP " + str(response_code) + ")"
		
		match response_code:
			401:
				error_message += "\n\nüí° –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞."
			402:
				error_message += "\n\nüí° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ OpenRouter."
			404:
				error_message += "\n\nüí° –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å."
			429:
				error_message += "\n\nüí° –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ."
			500, 502, 503:
				error_message += "\n\nüí° –ü—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ OpenRouter. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
			_:
				error_message += "\n\nüí° –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."
		
		is_requesting = false
		if is_inside_tree():
			add_message_to_chat("–°–∏—Å—Ç–µ–º–∞", error_message, "system")
		return
	
	# –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
	var response_text = body.get_string_from_utf8()
	write_debug_log("–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ OpenRouter: " + response_text, "INFO")
	
	var json = JSON.new()
	var parse_result = json.parse(response_text)
	
	if parse_result != OK:
		write_debug_log("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞: " + str(parse_result), "ERROR")
		print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞: ", parse_result)
		write_debug_log("–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: " + response_text, "ERROR")
		is_requesting = false
		if is_inside_tree():
			add_message_to_chat("–°–∏—Å—Ç–µ–º–∞", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter API.\n\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π\n‚Ä¢ –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ-JSON –æ—Ç–≤–µ—Ç", "system")
		return
	
	var response_data = json.data
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
	if response_data.has("error"):
		var error_info = response_data.error
		var error_message = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
		var error_type = "error"
		
		if error_info.has("message"):
			error_message = str(error_info.message)
		elif error_info.has("type"):
			error_type = str(error_info.type)
		
		write_debug_log("OpenRouter API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: " + str(error_info), "ERROR")
		print("OpenRouter API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ", error_info)
		
		# –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
		var user_message = "‚ùå –û—à–∏–±–∫–∞ OpenRouter API: " + error_message
		
			# –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
		if error_message.contains("quota") or error_message.contains("limit"):
			user_message += "\n\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ OpenRouter\n‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å"
		elif error_message.contains("model") or error_message.contains("provider"):
			user_message += "\n\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n‚Ä¢ –ú–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å (GPT-4o Mini, DeepSeek R1, Llama 3.1 8B)"
		elif error_message.contains("key") or error_message.contains("auth"):
			user_message += "\n\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞\n‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω"
		else:
			user_message += "\n\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á\n‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ"
		
		is_requesting = false
		if is_inside_tree():
			add_message_to_chat("–°–∏—Å—Ç–µ–º–∞", user_message, "system")
		return
	
	# –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç AI
	var ai_response = ""
	if response_data.has("choices") and response_data.choices.size() > 0:
		var choice = response_data.choices[0]
		if choice.has("message") and choice.message.has("content"):
			ai_response = choice.message.content
	
	if ai_response.strip_edges() == "":
		write_debug_log("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter API", "WARNING")
		print("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter API")
		is_requesting = false
		if is_inside_tree():
			add_message_to_chat("–°–∏—Å—Ç–µ–º–∞", "‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter API.", "system")
		return
	
	write_debug_log("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter API, –¥–ª–∏–Ω–∞: " + str(ai_response.length()), "INFO")
	print("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter API, –¥–ª–∏–Ω–∞: ", ai_response.length())
	
	# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç AI
	process_ai_response(ai_response)

func process_ai_response(ai_response: String):
	print("=== –ù–ê–ß–ê–õ–û process_ai_response ===")
	print("is_requesting –¥–æ —Å–±—Ä–æ—Å–∞: ", is_requesting)
	# –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
	is_requesting = false
	print("–°–±—Ä–∞—Å—ã–≤–∞–µ–º is_requesting = false –≤ process_ai_response")
	
	# –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI
	var new_commands = extract_new_commands(ai_response)
	
	# –í–†–ï–ú–ï–ù–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç AI –±–µ–∑ —Å–∫—Ä—ã—Ç–∏—è –∫–æ–º–∞–Ω–¥
	print("=== –û–¢–õ–ê–î–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ AI ===")
	print("–ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç AI: '", ai_response, "'")
	
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç AI (–≤—Ä–µ–º–µ–Ω–Ω–æ)
	var text_response = ai_response
	print("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç AI: '", text_response, "'")
	
	# –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ
	var model_info = get_current_model_info()
	var model_name = model_info.get("name", current_model)
	
	# –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ —á–∞—Ç —Å –∏–º–µ–Ω–µ–º –º–æ–¥–µ–ª–∏
	add_message_to_chat(model_name, text_response, "ai")
	
	# –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
	if new_commands != "":
		# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–º –ø–æ–ª–µ
		show_extracted_commands(new_commands)
		print("–ö–æ–º–∞–Ω–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã' –¥–ª—è –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
	else:
		# –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
		current_extracted_commands = ""
		# –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
		if current_dialog:
			var vbox = current_dialog.get_child(0)
			if vbox and vbox.get_child_count() > 0:
				var tab_container = vbox.get_child(0)
				if tab_container and tab_container.get_child_count() > 0:
					var ai_tab = tab_container.get_child(0)  # AI –ß–∞—Ç –≤–∫–ª–∞–¥–∫–∞ (–ø–µ—Ä–≤–∞—è)
					if ai_tab:
						var apply_button = ai_tab.get_meta("apply_button")
						if apply_button:
							update_apply_button_color(apply_button)

func remove_commands_from_text(text: String) -> String:
	# –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Ñ–æ—Ä–º–∞—Ç–∞ [++func:name@ –∫–æ–¥], [--func:name@], [-+func:name@ –∫–æ–¥] –∏–∑ —Ç–µ–∫—Å—Ç–∞
	var regex = RegEx.new()
	regex.compile("\\[\\+\\+[a-zA-Z_]+@[^\\]]*\\]|\\[\\+\\+[a-zA-Z_]+:[a-zA-Z_]+@[^\\]]*\\]|\\[\\+\\+[a-zA-Z_]+:[a-zA-Z_]+:[0-9]+@[^\\]]*\\]|\\[\\+\\+[a-zA-Z_]+:up@[^\\]]*\\]|\\[\\+\\+[a-zA-Z_]+:down@[^\\]]*\\]|\\[\\+\\+[a-zA-Z_]+:up:[a-zA-Z_]+@[^\\]]*\\]|\\[\\+\\+[a-zA-Z_]+:down:[a-zA-Z_]+@[^\\]]*\\]|\\[\\-\\-[a-zA-Z_]+:[a-zA-Z_]+@[^\\]]*\\]|\\[\\-\\+[a-zA-Z_]+@[^\\]]*\\]|\\[\\-\\+[a-zA-Z_]+:[a-zA-Z_]+@[^\\]]*\\]|\\[\\-\\+[a-zA-Z_]+:[a-zA-Z_]+:[^@]*@[^\\]]*\\]")
	
	print("–£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª–∏–Ω–æ–π: ", text.length())
	print("–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: '", text, "'")
	
	# –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
	var results = regex.search_all(text)
	var commands_found = []
	for result in results:
		commands_found.append(result.get_string())
	
	print("–ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥: ", commands_found.size())
	for cmd in commands_found:
		print("–ö–æ–º–∞–Ω–¥–∞: '", cmd, "'")
	
	# –ó–∞–º–µ–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ –ø—Ä–æ–±–µ–ª
	var result = text
	for cmd in commands_found:
		result = result.replace(cmd, " ")
	
	# –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
	result = result.replace("  ", " ")  # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
	result = result.strip_edges()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
	
	print("–¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥: '", result, "'")
	print("–¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª–∏–Ω–æ–π: ", result.length())
	return result

func show_api_key_dialog():
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	print("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI —á–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á Google Gemini.")
	print("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –≤ –ø–æ–ª–µ –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á'.")
	
	# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
	add_message_to_chat("–°–∏—Å—Ç–µ–º–∞", "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI —á–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á Google Gemini. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –≤ –ø–æ–ª–µ –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á'.", "system")

func save_api_key():
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á, –º–æ–¥–µ–ª—å –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞
	var config = ConfigFile.new()
	config.set_value("smart_replace", "gemini_api_key", gemini_api_key)
	config.set_value("smart_replace", "current_model", current_model)
	config.set_value("smart_replace", "current_provider", current_provider)
	config.save("res://smart_replace_config.ini")

func load_api_key():
	# –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á, –º–æ–¥–µ–ª—å –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
	var config = ConfigFile.new()
	var error = config.load("res://smart_replace_config.ini")
	if error == OK:
		gemini_api_key = config.get_value("smart_replace", "gemini_api_key", "")
		current_model = config.get_value("smart_replace", "current_model", "openai/gpt-4o-mini")
		current_provider = config.get_value("smart_replace", "current_provider", "openrouter")
	else:
		# –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏)
		gemini_api_key = ""
		current_model = "openai/gpt-4o-mini"  # –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å OpenRouter
		current_provider = "openrouter"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
func test_connection():
	print("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Google...")
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∑–µ–ª –≤ –¥–µ—Ä–µ–≤–µ
	if not is_inside_tree():
		print("–£–∑–µ–ª –Ω–µ –≤ –¥–µ—Ä–µ–≤–µ, –æ—Ç–º–µ–Ω—è–µ–º —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
		return
	
	var http = HTTPRequest.new()
	http.timeout = 10
	add_child(http)
	
	var error = http.request("https://www.google.com", [], HTTPClient.METHOD_GET)
	if error != OK:
		print("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Google: ", error)
	else:
		print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Google —É—Å–ø–µ—à–Ω–æ")
	
	# –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª
	if http and is_instance_valid(http):
		http.request_completed.connect(func(result, response_code, headers, body):
			print("–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω: –∫–æ–¥ ", response_code)
			if http and is_instance_valid(http):
				http.queue_free()
		)

func show_extracted_commands(ini_commands: String):
	# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –¥–∏–∞–ª–æ–≥
	if not current_dialog:
		print("–¢–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ show_extracted_commands!")
		return
	
	var vbox = current_dialog.get_child(0)
	if not vbox or vbox.get_child_count() == 0:
		print("VBoxContainer –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ show_extracted_commands!")
		return
	
	var tab_container = vbox.get_child(0)
	if not tab_container or tab_container.get_child_count() < 3:
		print("TabContainer –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ show_extracted_commands!")
		return
	
	var ai_tab = tab_container.get_child(0)  # AI –ß–∞—Ç –≤–∫–ª–∞–¥–∫–∞ (—Ç–µ–ø–µ—Ä—å –ø–µ—Ä–≤–∞—è)
	if not ai_tab:
		print("AI –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ show_extracted_commands!")
		return
	
	# –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
	var extracted_edit = ai_tab.get_meta("extracted_edit")
	if not extracted_edit:
		print("extracted_edit –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö!")
		return
	
	var apply_button = ai_tab.get_meta("apply_button")
	if not apply_button:
		print("apply_button –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö!")
		return
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
	current_extracted_commands = ini_commands
	
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–º –ø–æ–ª–µ
	extracted_edit.text = ini_commands
	
	# –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
	update_apply_button_color(apply_button)
	
	print("INI –∫–æ–º–∞–Ω–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é")

# ===== –ù–û–í–´–ô –ü–ê–†–°–ï–† –ö–û–ú–ê–ù–î =====

func extract_ini_commands(ai_response: String) -> String:
	# –ò—â–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ñ–æ—Ä–º–∞—Ç–∞ [++N@], [+++N@], [--N@], [---N@]
	var new_commands = extract_new_commands(ai_response)
	return new_commands

func extract_new_commands(ai_response: String) -> String:
	# –ò—â–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ–∫—Å—Ç–µ
	var commands = []
	var regex = RegEx.new()
	regex.compile("\\[\\+\\+[a-zA-Z_]+@[^\\]]*\\]|\\[\\+\\+[a-zA-Z_]+:[a-zA-Z_]+@[^\\]]*\\]|\\[\\+\\+[a-zA-Z_]+:[a-zA-Z_]+:[0-9]+@[^\\]]*\\]|\\[\\+\\+[a-zA-Z_]+:up@[^\\]]*\\]|\\[\\+\\+[a-zA-Z_]+:down@[^\\]]*\\]|\\[\\+\\+[a-zA-Z_]+:up:[a-zA-Z_]+@[^\\]]*\\]|\\[\\+\\+[a-zA-Z_]+:down:[a-zA-Z_]+@[^\\]]*\\]|\\[\\-\\-[a-zA-Z_]+:[a-zA-Z_]+@[^\\]]*\\]|\\[\\-\\+[a-zA-Z_]+@[^\\]]*\\]|\\[\\-\\+[a-zA-Z_]+:[a-zA-Z_]+@[^\\]]*\\]|\\[\\-\\+[a-zA-Z_]+:[a-zA-Z_]+:[^@]*@[^\\]]*\\]")
	
	var results = regex.search_all(ai_response)
	print("–ü–∞—Ä—Å–µ—Ä –Ω–∞—à–µ–ª –∫–æ–º–∞–Ω–¥: ", results.size())
	
	# –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–æ–º–∞–Ω–¥—ã –∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
	var unique_commands = []
	for result in results:
		var command = result.get_string()
		print("–ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: '", command, "'")
		if command not in unique_commands and command not in executed_commands_history:
			unique_commands.append(command)
			commands.append(command)
		elif command in unique_commands:
			print("–î—É–±–ª–∏—Ä—É—é—â–∞—è—Å—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞: '", command, "'")
		elif command in executed_commands_history:
			print("–£–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞: '", command, "'")
	
	var result = "\n".join(commands)
	print("–ò—Ç–æ–≥–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤): '", result, "'")
	return result

func parse_new_command(command: String) -> Dictionary:
	print("=== –ü–ê–†–°–ò–ù–ì –ö–û–ú–ê–ù–î–´ ===")
	print("–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: '", command, "'")
	
	# –ü–∞—Ä—Å–∏–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É —Ñ–æ—Ä–º–∞—Ç–∞ [++func:N@ –∫–æ–¥], [++for:N@ –∫–æ–¥], [--N@] –∏ —Ç.–¥.
	var result = {
		"type": "",
		"code": "",
		"element_type": "",
		"element_name": "",
		"indent_level": 0,
		"direction": "",
		"target_function": "",
		"old_function_name": "",
		"block_search": ""
	}
	
	# –£–±–∏—Ä–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å–∫–æ–±–∫–∏
	var clean_command = command.substr(1, command.length() - 2)
	
	# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã
	if clean_command.begins_with("++"):
		# –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã [++func:N@], [++func:name@], [++func:name:level@] –∏ —Ç.–¥.
		result.type = "insert_by_element"  # –í—Å–µ –∫–æ–º–∞–Ω–¥—ã ++ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ insert_by_element
		clean_command = clean_command.substr(2)
	elif clean_command.begins_with("--"):
		# –ö–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏ [--func:name@]
		result.type = "delete_by_name"
		clean_command = clean_command.substr(2)
	elif clean_command.begins_with("-+"):
		# –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–º–µ–Ω—ã [-+func:name@], [-+func:name:new@], [-+func:name:block@]
		result.type = "replace_function"
		clean_command = clean_command.substr(2)
	
	# –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∫–æ–¥
	var parts = clean_command.split("@", true, 1)
	print("–ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: '", clean_command, "'")
	print("–ß–∞—Å—Ç–∏ –ø–æ—Å–ª–µ @: ", parts)
	
	if parts.size() >= 1:
		var param_part = parts[0]
		print("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: '", param_part, "'")
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã [++func@], [++func:up@], [++func:down@], [++func:up:Move@] –∏ —Ç.–¥.
		if param_part.contains(":"):
			var element_parts = param_part.split(":", true, 1)
			print("–≠–ª–µ–º–µ–Ω—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: ", element_parts)
			if element_parts.size() >= 1:
				result.element_type = element_parts[0]  # func, for, if, while
				print("–¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞: ", result.element_type)
			if element_parts.size() >= 2:
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –¥–≤–æ–µ—Ç–æ—á–∏–µ –≤ –æ—Å—Ç–∞–≤—à–µ–π—Å—è —á–∞—Å—Ç–∏
				var remaining_part = element_parts[1]
				if remaining_part.contains(":"):
					# –ö–æ–º–∞–Ω–¥–∞ –≤–∏–¥–∞ [++func:down:Move@] - —Ä–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–ª—å—à–µ
					var sub_parts = remaining_part.split(":", true, 1)
					if sub_parts.size() >= 1:
						if sub_parts[0] == "up" or sub_parts[0] == "down":
							result.direction = sub_parts[0]
							print("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ", result.direction)
							if sub_parts.size() >= 2:
								result.target_function = sub_parts[1]
								print("–¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: ", result.target_function)
				else:
					# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (up/down) –∏–ª–∏ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
					if remaining_part == "up" or remaining_part == "down":
						result.direction = remaining_part
						print("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ", result.direction)
					else:
						# –ö–æ–º–∞–Ω–¥—ã —Å –∏–º–µ–Ω–∞–º–∏ –∏–ª–∏ —É—Ä–æ–≤–Ω—è–º–∏ –æ—Ç—Å—Ç—É–ø–æ–≤
							result.element_name = remaining_part
							print("–ò–º—è —ç–ª–µ–º–µ–Ω—Ç–∞: ", result.element_name)
							# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Ä–æ–≤–µ–Ω—å –æ—Ç—Å—Ç—É–ø–æ–≤ [++func:name:level@]
							if element_parts.size() >= 3:
								result.indent_level = int(element_parts[2])
								print("–£—Ä–æ–≤–µ–Ω—å –æ—Ç—Å—Ç—É–ø–æ–≤: ", result.indent_level)
		else:
			# –ö–æ–º–∞–Ω–¥—ã –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ [++func@] - –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
			result.element_type = param_part
			# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
			result.direction = "end"
	
	if parts.size() >= 2:
		result.code = parts[1].strip_edges()
		# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
		result.code = result.code.replace("\\n", "\n")
		result.code = result.code.replace("\\t", "\t")
	
	# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥ –∑–∞–º–µ–Ω—ã [-+func:name@]
	if result.type == "replace_function":
		var param_part = ""
		if parts.size() >= 1:
			param_part = parts[0]
		
		print("=== –û–¢–õ–ê–î–ö–ê –ü–ê–†–°–ò–ù–ì–ê –ó–ê–ú–ï–ù–´ ===")
		print("param_part: '", param_part, "'")
		
		if param_part.contains(":"):
			var element_parts = param_part.split(":", true, 1)
			print("element_parts: ", element_parts)
			if element_parts.size() >= 1:
				result.element_type = element_parts[0]  # func
			if element_parts.size() >= 2:
				var remaining_part = element_parts[1]
				print("remaining_part: '", remaining_part, "'")
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –¥–≤–æ–µ—Ç–æ—á–∏–µ –≤ remaining_part
				if remaining_part.contains(":"):
					# –ö–æ–º–∞–Ω–¥–∞ [-+func:Go:new@] - –∑–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é Go –Ω–∞ –Ω–æ–≤—É—é —Å –∏–º–µ–Ω–µ–º new
					var sub_parts = remaining_part.split(":", true, 1)
					if sub_parts.size() >= 1:
						result.old_function_name = sub_parts[0]  # Go
						print("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω old_function_name: ", result.old_function_name)
					if sub_parts.size() >= 2:
						if sub_parts[1] == "new":
							result.element_name = "new"
							print("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω element_name: ", result.element_name)
						else:
							# –ö–æ–º–∞–Ω–¥–∞ [-+func:Go:if3<5@] - –∏—Å–∫–∞—Ç—å –±–ª–æ–∫ if 3<5 –≤ —Ñ—É–Ω–∫—Ü–∏–∏ Go
							result.block_search = sub_parts[1]
				elif remaining_part == "new":
					# –ö–æ–º–∞–Ω–¥–∞ [-+func:Move:new@] - –∑–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ "new"
					result.element_name = "new"
					result.old_function_name = element_parts[0]  # Move
				elif remaining_part.contains("if") or remaining_part.contains("for") or remaining_part.contains("while"):
					# –ö–æ–º–∞–Ω–¥–∞ [-+func:Move:if3<5@] - –∏—Å–∫–∞—Ç—å –±–ª–æ–∫ if 3<5
					result.block_search = remaining_part
				else:
					# –ö–æ–º–∞–Ω–¥–∞ [-+func:Move@] - –∑–∞–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏
					result.element_name = remaining_part
		else:
			# –ö–æ–º–∞–Ω–¥–∞ [-+func@] - –∑–∞–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏
			result.element_type = param_part
	
	print("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: ", result)
	return result



func find_element_by_name(lines: Array, element_type: String, name: String) -> int:
	# –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –µ–≥–æ –Ω–∞—á–∞–ª–∞
	print("–ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Ç–∏–ø–∞ '", element_type, "' —Å –∏–º–µ–Ω–µ–º '", name, "'")
	for i in range(lines.size()):
		var line = lines[i].strip_edges()
		print("–°—Ç—Ä–æ–∫–∞ ", i + 1, ": '", line, "'")
		# –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –∏–º–µ–Ω–µ–º (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–ª–∏ –±–µ–∑)
		if line.begins_with(element_type + " " + name):
			print("–ù–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ: ", i + 1)
			return i + 1  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (–æ—Ç 1)
	
	print("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
	# –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º -1
	return -1

func find_insert_position_in_element(lines: Array, element_start: int, indent_level: int) -> int:
	# –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –æ—Ç—Å—Ç—É–ø–æ–≤
	if element_start <= 0 or element_start > lines.size():
		return lines.size()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è
		
	var element_end = find_block_end(lines, element_start - 1)
	var target_indent = indent_level * 4  # 4 –ø—Ä–æ–±–µ–ª–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å
	
	# –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ–∑–∏—Ü–∏—é –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
	for i in range(element_start, element_end):
		if i >= lines.size():
			break
		var line = lines[i]
		var line_indent = get_line_indent(line)
		
		# –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º –∏–ª–∏ –±–æ–ª—å—à–∏–º, –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –Ω–µ–π
		if line_indent >= target_indent:
			return i + 1  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (–æ—Ç 1)
	
	# –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ–∑–∏—Ü–∏—é, –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –∫–æ–Ω—Ü–æ–º —ç–ª–µ–º–µ–Ω—Ç–∞
	return element_end

func find_first_function_position(lines: Array) -> int:
	# –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
	for i in range(lines.size()):
		var line = lines[i].strip_edges()
		if line.begins_with("func "):
			return i + 1  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (–æ—Ç 1)
	return lines.size()  # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞

func find_position_relative_to_function(lines: Array, direction: String, target_function: String) -> int:
	# –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –≤—ã—à–µ –∏–ª–∏ –Ω–∏–∂–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
	print("–ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é: ", target_function)
	var function_pos = find_element_by_name(lines, "func", target_function)
	print("–ù–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ", function_pos)
	
	if function_pos > 0:
		if direction == "up":
			print("–í—Å—Ç–∞–≤–ª—è–µ–º –≤—ã—à–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ", function_pos)
			return function_pos  # –í—Å—Ç–∞–≤–∏—Ç—å –≤—ã—à–µ —Ñ—É–Ω–∫—Ü–∏–∏
		elif direction == "down":
			var function_end = find_block_end(lines, function_pos - 1)
			print("–ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ", function_end, ", –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ", function_end + 1)
			return function_end + 1  # –í—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
	
	print("–§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞")
	return lines.size()  # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞

func detect_indent_type(lines: Array) -> bool:
	# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–∞–±—ã, false –µ—Å–ª–∏ –ø—Ä–æ–±–µ–ª—ã
	if lines.size() > 0:
		for line in lines:
			if line.length() > 0 and line[0] == "\t":
				return true
			elif line.length() > 0 and line[0] == " ":
				return false
	return false  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–±–µ–ª—ã

func create_indent(level: int, use_tabs: bool) -> String:
	# –°–æ–∑–¥–∞–µ—Ç –æ—Ç—Å—Ç—É–ø —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
	if use_tabs:
		return "\t".repeat(level)
	else:
		return "    ".repeat(level)

func insert_multiline_code(lines: Array, position: int, code: String):
	# –í—Å—Ç–∞–≤–ª—è–µ—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–¥ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
	print("=== –í–°–¢–ê–í–ö–ê –ú–ù–û–ì–û–°–¢–†–û–ß–ù–û–ì–û –ö–û–î–ê ===")
	print("–ü–æ–∑–∏—Ü–∏—è –≤—Å—Ç–∞–≤–∫–∏: ", position)
	print("–ö–æ–¥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏: '", code, "'")
	
	var code_lines = code.split("\n")
	print("–°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ", code_lines.size())
	
	# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç—Å—Ç—É–ø–æ–≤ –≤ —Ñ–∞–π–ª–µ (—Ç–∞–±—ã –∏–ª–∏ –ø—Ä–æ–±–µ–ª—ã)
	var use_tabs = detect_indent_type(lines)
	print("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±—ã: ", use_tabs)
	
	# –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫
	for i in range(code_lines.size() - 1, -1, -1):
		var line = code_lines[i]
		print("–í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É ", i + 1, ": '", line, "'")
		
		# –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç—Å—Ç—É–ø—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
		if use_tabs:
			# –ó–∞–º–µ–Ω—è–µ–º 4 –ø—Ä–æ–±–µ–ª–∞ –Ω–∞ —Ç–∞–±
			line = line.replace("    ", "\t")
		
		if position > 0 and position <= lines.size():
			lines.insert(position - 1, line)
			print("–í—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é: ", position - 1)
		else:
			lines.append(line)
			print("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞")

func execute_new_commands(commands: String, current_code: String) -> String:
	print("=== –û–¢–õ–ê–î–ö–ê: execute_new_commands ===")
	print("–í—Ö–æ–¥–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: ", commands)
	
	# –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
	var lines = current_code.split("\n")
	
	# –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ executed_commands_history
	var regex = RegEx.new()
	regex.compile("\\[\\+\\+[a-zA-Z_]+@[^\\]]*\\]|\\[\\+\\+[a-zA-Z_]+:[a-zA-Z_]+@[^\\]]*\\]|\\[\\+\\+[a-zA-Z_]+:[a-zA-Z_]+:[0-9]+@[^\\]]*\\]|\\[\\+\\+[a-zA-Z_]+:up@[^\\]]*\\]|\\[\\+\\+[a-zA-Z_]+:down@[^\\]]*\\]|\\[\\+\\+[a-zA-Z_]+:up:[a-zA-Z_]+@[^\\]]*\\]|\\[\\+\\+[a-zA-Z_]+:down:[a-zA-Z_]+@[^\\]]*\\]|\\[\\-\\-[a-zA-Z_]+:[a-zA-Z_]+@[^\\]]*\\]|\\[\\-\\+[a-zA-Z_]+@[^\\]]*\\]|\\[\\-\\+[a-zA-Z_]+:[a-zA-Z_]+@[^\\]]*\\]|\\[\\-\\+[a-zA-Z_]+:[a-zA-Z_]+:[^@]*@[^\\]]*\\]")
	
	var results = regex.search_all(commands)
	var command_list = []
	for result in results:
		var command = result.get_string()
		print("–ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: '", command, "'")
		command_list.append(command)
	
	print("–ö–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ", command_list.size())
	
	if command_list.size() == 0:
		print("–ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
		return current_code
	
	for command in command_list:
		var parsed = parse_new_command(command)
		lines = execute_single_new_command(parsed, lines)
	
	return "\n".join(lines)

func execute_single_new_command(parsed: Dictionary, lines: Array) -> Array:
	
	match parsed.type:

		
		"insert_by_element":
			# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
			if parsed.direction == "end":
				# –ö–æ–º–∞–Ω–¥–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ [++func@] - –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
				insert_multiline_code(lines, lines.size(), parsed.code)
			elif parsed.direction != "":
				# –ö–æ–º–∞–Ω–¥—ã —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ [++func:up@], [++func:down@], [++func:up:Move@], [++func:down:Move@]
				var target_pos = 0
				if parsed.target_function != "":
					# –í—Å—Ç–∞–≤–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ [++func:up:Move@], [++func:down:Move@]
					target_pos = find_position_relative_to_function(lines, parsed.direction, parsed.target_function)
				else:
					# –í—Å—Ç–∞–≤–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ [++func:up@], [++func:down@]
					if parsed.direction == "up":
						target_pos = find_first_function_position(lines)
					else:  # down
						target_pos = lines.size()  # –í –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
				
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
				if target_pos > 0 and target_pos <= lines.size():
					insert_multiline_code(lines, target_pos, parsed.code)
				else:
					# –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
					insert_multiline_code(lines, lines.size(), parsed.code)
			elif parsed.element_name != "":
				# –°—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å –∏–º–µ–Ω–∞–º–∏ [++func:name@] –∏–ª–∏ [++func:name:level@]
				var element_start = find_element_by_name(lines, parsed.element_type, parsed.element_name)
				if element_start > 0:
					if parsed.indent_level > 0:
						# –í—Å—Ç–∞–≤–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –æ—Ç—Å—Ç—É–ø–æ–≤ [++func:name:level@]
						var insert_pos = find_insert_position_in_element(lines, element_start, parsed.indent_level)
						var use_tabs = detect_indent_type(lines)
						var indent = create_indent(parsed.indent_level, use_tabs)  # –°–æ–∑–¥–∞–µ–º –æ—Ç—Å—Ç—É–ø
						var indented_code = indent + parsed.code
						if insert_pos > 0 and insert_pos <= lines.size():
							insert_multiline_code(lines, insert_pos, indented_code)
						else:
							insert_multiline_code(lines, lines.size(), indented_code)
					else:
						# –í—Å—Ç–∞–≤–∫–∞ –Ω–∞ 0 —É—Ä–æ–≤–µ–Ω—å [++func:name@]
						var element_end = find_block_end(lines, element_start - 1)
						if element_end >= 0 and element_end <= lines.size():
							insert_multiline_code(lines, element_end + 1, parsed.code)
						else:
							insert_multiline_code(lines, lines.size(), parsed.code)
				else:
					# –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
					insert_multiline_code(lines, lines.size(), parsed.code)

			else:
				# –ö–æ–º–∞–Ω–¥–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ [++func@] - –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
				lines.append(parsed.code)
		

		
		"delete_by_name":
			# –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏
			var target_line = find_element_by_name(lines, parsed.element_type, parsed.element_name)
			if target_line > 0:
				# –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ —É–¥–∞–ª—è–µ–º –≤–µ—Å—å –±–ª–æ–∫
				var start_line = target_line - 1  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞
				var end_line = find_block_end(lines, start_line)
				
				# –£–¥–∞–ª—è–µ–º –≤–µ—Å—å –±–ª–æ–∫
				for i in range(start_line, end_line + 1):
					if start_line < lines.size():
						lines.remove_at(start_line)
		
		"replace_function":
			# –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–º–µ–Ω—ã [-+func:name@], [-+func:name:new@], [-+func:name:block@]
			print("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–º–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏")
			print("parsed.element_name: ", parsed.element_name)
			print("parsed.old_function_name: ", parsed.old_function_name)
			
			if parsed.element_name == "new":
				# –ö–æ–º–∞–Ω–¥–∞ [-+func:Move:new@ –∫–æ–¥] - –∑–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –Ω–æ–≤—É—é —Å –∏–º–µ–Ω–µ–º "new"
				print("–ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–º–µ–Ω—ã: ", parsed.old_function_name)
				var target_line = find_element_by_name(lines, parsed.element_type, parsed.old_function_name)
				if target_line > 0:
					# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é
					var start_line = target_line  # –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –≤—ã—á–∏—Ç–∞–Ω–∏—è 1)
					var end_line = find_function_end(lines, start_line)
					print("–§—É–Ω–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ: ", target_line)
					print("–£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å ", start_line, " –ø–æ ", end_line)
					
					# –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –∏–Ω–¥–µ–∫—Å—ã –Ω–µ —Å–±–∏–≤–∞–ª–∏—Å—å
					for i in range(end_line, start_line - 1, -1):
						if i < lines.size():
							print("–£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É ", i + 1, ": '", lines[i], "'")
							lines.remove_at(i)
					
					# –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é start_line (–≥–¥–µ –±—ã–ª–∞ —Ñ—É–Ω–∫—Ü–∏—è)
					if parsed.code != "":
						print("–í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é: ", start_line)
						insert_multiline_code(lines, start_line, parsed.code)
			else:
				# –ö–æ–º–∞–Ω–¥–∞ [-+func:Move@ –∫–æ–¥] - –∑–∞–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏
				var target_line = find_element_by_name(lines, parsed.element_type, parsed.element_name)
				if target_line > 0:
					var start_line = target_line  # –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –≤—ã—á–∏—Ç–∞–Ω–∏—è 1)
					var end_line = find_function_end(lines, start_line)
					print("–ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Å—Ç—Ä–æ–∫–∏ —Å ", start_line + 1, " –ø–æ ", end_line)
					
					# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
					var function_declaration = lines[start_line]
					
					# –£–¥–∞–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–æ –Ω–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ) –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
					for i in range(end_line, start_line, -1):
						if i < lines.size():
							lines.remove_at(i)
					
					# –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
					if parsed.code != "":
						insert_multiline_code(lines, start_line + 1, parsed.code)
	

	
	return lines

func find_block_end(lines: Array, start_line: int) -> int:
	# –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –∫–æ–¥–∞ (—Ñ—É–Ω–∫—Ü–∏—è, if, for, while –∏ —Ç.–¥.)
	if start_line >= lines.size():
		return start_line
	
	var start_indent = get_line_indent(lines[start_line])
	var current_line = start_line + 1
	
	while current_line < lines.size():
		var line = lines[current_line]
		var line_indent = get_line_indent(line)
		
		# –ï—Å–ª–∏ –æ—Ç—Å—Ç—É–ø –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –Ω–∞—á–∞–ª—å–Ω–æ–º—É, –±–ª–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
		if line_indent <= start_indent and line.strip_edges() != "":
			break
		
		current_line += 1
	
	return current_line - 1

func find_function_end(lines: Array, start_line: int) -> int:
	# –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –æ—Ç—Å—Ç—É–ø–æ–≤
	if start_line >= lines.size():
		return start_line
	
	var current_line = start_line  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º–æ–π —Å—Ç—Ä–æ–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
	print("–ò—â–µ–º –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç—Ä–æ–∫–∏: ", start_line + 1)
	
	# –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Å—Ç—É–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
	var function_declaration = lines[start_line]
	var function_indent = get_line_indent(function_declaration)
	print("–û—Ç—Å—Ç—É–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: ", function_indent)
	
	# –ò—â–µ–º –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –æ—Ç—Å—Ç—É–ø–∞–º
	while current_line < lines.size():
		var line = lines[current_line]
		var line_indent = get_line_indent(line)
		var stripped_line = line.strip_edges()
		
		print("–°—Ç—Ä–æ–∫–∞ ", current_line + 1, " (–æ—Ç—Å—Ç—É–ø ", line_indent, "): '", stripped_line, "'")
		
		# –ï—Å–ª–∏ –æ—Ç—Å—Ç—É–ø –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –æ—Ç—Å—Ç—É–ø—É —Ñ—É–Ω–∫—Ü–∏–∏ –ò —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
		# –∑–Ω–∞—á–∏—Ç —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
		if line_indent <= function_indent and stripped_line != "":
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
			if not is_continuation_line(stripped_line):
				print("–ù–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–µ: ", current_line - 1)
				return current_line - 1
		
		current_line += 1
	
	print("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞, –∫–æ–Ω–µ—Ü –Ω–∞ —Å—Ç—Ä–æ–∫–µ: ", lines.size() - 1)
	return lines.size() - 1

func is_continuation_line(line: String) -> bool:
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
	var stripped = line.strip_edges()
	
	# –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
	if stripped.ends_with("\\") or stripped.ends_with("(") or stripped.ends_with("["):
		return true
	
	# –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
	if stripped.begins_with(")") or stripped.begins_with("]") or stripped.begins_with(","):
		return true
	
	# –ï—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	if stripped.begins_with('"""') or stripped.ends_with('"""'):
		return true
	
	return false

func get_line_indent(line: String) -> int:
	# –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
	var indent = 0
	for char in line:
		if char == " ":
			indent += 1
		elif char == "\t":
			indent += 4  # –¢–∞–±—É–ª—è—Ü–∏—è = 4 –ø—Ä–æ–±–µ–ª–∞
		else:
			break
	return indent

func get_line_indent_string(line: String) -> String:
	# –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç—Å—Ç—É–ø–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏
	var indent = ""
	for char in line:
		if char == " ":
			indent += " "
		elif char == "\t":
			indent += "    "  # –¢–∞–±—É–ª—è—Ü–∏—è = 4 –ø—Ä–æ–±–µ–ª–∞
		else:
			break
	return indent





# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫ Godot
func update_errors_list(errors_list: ItemList):
	errors_list.clear()
	
	# –ü–æ–ª—É—á–∞–µ–º –æ—à–∏–±–∫–∏ –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ Godot
	var editor_interface = get_editor_interface()
	if not editor_interface:
		return
	
	# –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–±–ª–µ–º
	var errors = []  # –ö—Ä–∞—Å–Ω—ã–µ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
	var warnings = []  # –ñ–µ–ª—Ç—ã–µ - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
	var info = []  # –°–∏–Ω–∏–µ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	
	# –ü–æ–ª—É—á–∞–µ–º –æ—à–∏–±–∫–∏ –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
	var script_editor = editor_interface.get_script_editor()
	if script_editor:
		# –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
		var open_scripts = script_editor.get_open_scripts()
		for script in open_scripts:
			if script:
				var file_path = script.resource_path
				var file = FileAccess.open(file_path, FileAccess.READ)
				if file:
					var content = file.get_as_text()
					file.close()
					
					# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
					var lines = content.split("\n")
					for i in range(lines.size()):
						var line = lines[i]
						var line_number = i + 1
						
						# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏ (–û–®–ò–ë–ö–ê)
						var open_brackets = line.count("(") + line.count("[") + line.count("{")
						var close_brackets = line.count(")") + line.count("]") + line.count("}")
						if open_brackets != close_brackets:
							errors.append("–û–®–ò–ë–ö–ê: %s:%d - –ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏" % [file_path.get_file(), line_number])
						
						# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∫–∞–≤—ã—á–∫–∏ (–û–®–ò–ë–ö–ê)
						var quotes = line.count("\"")
						if quotes % 2 != 0:
							errors.append("–û–®–ò–ë–ö–ê: %s:%d - –ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∫–∞–≤—ã—á–∫–∏" % [file_path.get_file(), line_number])
						
						# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–≤–æ–µ—Ç–æ—á–∏—è –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–û–®–ò–ë–ö–ê)
						var stripped_line = line.strip_edges()
						if stripped_line.begins_with("func ") and not stripped_line.ends_with(":"):
							errors.append("–û–®–ò–ë–ö–ê: %s:%d - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ –ø–æ—Å–ª–µ func" % [file_path.get_file(), line_number])
						elif stripped_line.begins_with("if ") and not stripped_line.ends_with(":"):
							errors.append("–û–®–ò–ë–ö–ê: %s:%d - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ –ø–æ—Å–ª–µ if" % [file_path.get_file(), line_number])
						elif stripped_line.begins_with("for ") and not stripped_line.ends_with(":"):
							errors.append("–û–®–ò–ë–ö–ê: %s:%d - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ –ø–æ—Å–ª–µ for" % [file_path.get_file(), line_number])
						elif stripped_line.begins_with("while ") and not stripped_line.ends_with(":"):
							errors.append("–û–®–ò–ë–ö–ê: %s:%d - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ –ø–æ—Å–ª–µ while" % [file_path.get_file(), line_number])
						elif stripped_line.begins_with("match ") and not stripped_line.ends_with(":"):
							errors.append("–û–®–ò–ë–ö–ê: %s:%d - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ –ø–æ—Å–ª–µ match" % [file_path.get_file(), line_number])
						elif stripped_line.begins_with("class_name ") and not stripped_line.ends_with(":"):
							errors.append("–û–®–ò–ë–ö–ê: %s:%d - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ –ø–æ—Å–ª–µ class_name" % [file_path.get_file(), line_number])
						elif stripped_line.begins_with("extends ") and not stripped_line.ends_with(":"):
							errors.append("–û–®–ò–ë–ö–ê: %s:%d - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏–µ –ø–æ—Å–ª–µ extends" % [file_path.get_file(), line_number])
						
						# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï)
						if "var " in line and "=" in line:
							var var_name = line.split("var ")[1].split("=")[0].strip_edges()
							if var_name != "" and not content.contains(" " + var_name + " ") and not content.contains("(" + var_name + ")"):
								warnings.append("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: %s:%d - –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è '%s'" % [file_path.get_file(), line_number, var_name])
	
	# –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ (–∫—Ä–∞—Å–Ω—ã–µ)
	for error in errors:
		var index = errors_list.add_item(error)
		errors_list.set_item_custom_fg_color(index, Color.RED)
	
	# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–∂–µ–ª—Ç—ã–µ)
	for warning in warnings:
		var index = errors_list.add_item(warning)
		errors_list.set_item_custom_fg_color(index, Color.YELLOW)
	
	# –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Å–∏–Ω–∏–µ)
	for info_item in info:
		var index = errors_list.add_item(info_item)
		errors_list.set_item_custom_fg_color(index, Color.CYAN)
	
	# –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
	if errors.size() == 0 and warnings.size() == 0:
		var index = errors_list.add_item("‚úÖ –ù–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫")
		errors_list.set_item_custom_fg_color(index, Color.GREEN)
		index = errors_list.add_item("üí° –î–æ–±–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É'")
		errors_list.set_item_custom_fg_color(index, Color.CYAN)
	
	# –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–∏–Ω–∏–µ)
	for system_msg in system_messages:
		var index = errors_list.add_item(system_msg)
		errors_list.set_item_custom_fg_color(index, Color.CYAN)
	
	# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
	var add_index = errors_list.add_item("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤—Ä—É—á–Ω—É—é...")
	errors_list.set_item_custom_fg_color(add_index, Color.CYAN)
	
	print("–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: %d –æ—à–∏–±–æ–∫, %d –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π, %d —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π" % [errors.size(), warnings.size(), system_messages.size()])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏
func show_add_error_dialog(errors_list: ItemList):
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã—Ç –ª–∏ —É–∂–µ –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
	for dialog in open_dialogs:
		if dialog.title == "–î–æ–±–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É" and dialog.visible:
			print("–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç!")
			return
	
	var dialog = AcceptDialog.new()
	dialog.title = "–î–æ–±–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É"
	dialog.size = Vector2(600, 400)
	
	# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	var vbox = VBoxContainer.new()
	dialog.add_child(vbox)
	
	# –ó–∞–≥–æ–ª–æ–≤–æ–∫
	var label = Label.new()
	label.text = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ Godot:"
	vbox.add_child(label)
	
	# –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –æ—à–∏–±–∫–∏
	var error_edit = TextEdit.new()
	error_edit.custom_minimum_size = Vector2(580, 250)
	error_edit.placeholder_text = "–ù–∞–ø—Ä–∏–º–µ—Ä:\nERROR: res://test.gd:10 - Parse Error: Invalid syntax\nWARNING: res://test.gd:15 - Unused variable 'x'\nWARNING: editor/editor_file_system.cpp:1358 - UID duplicate detected\n\n–°–æ–≤–µ—Ç—ã:\n- –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å ERROR: –¥–ª—è –∫—Ä–∞—Å–Ω—ã—Ö –æ—à–∏–±–æ–∫\n- –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å WARNING: –¥–ª—è –∂–µ–ª—Ç—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n- –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å INFO: –¥–ª—è —Å–∏–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n- –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è Godot —Ç–æ–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å"
	vbox.add_child(error_edit)
	
	# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	var quick_buttons = HBoxContainer.new()
	vbox.add_child(quick_buttons)
	
	var uid_duplicate_button = Button.new()
	uid_duplicate_button.text = "UID Duplicate"
	uid_duplicate_button.tooltip_text = "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ UID"
	uid_duplicate_button.pressed.connect(func():
		error_edit.text = "WARNING: editor/editor_file_system.cpp:1358 - UID duplicate detected between res://plugin/icon.svg and res://addons/smart_replace/plugin/icon.svg."
	)
	quick_buttons.add_child(uid_duplicate_button)
	
	var debug_server_button = Button.new()
	debug_server_button.text = "Debug Server"
	debug_server_button.tooltip_text = "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ debug —Å–µ—Ä–≤–µ—Ä–∞"
	debug_server_button.pressed.connect(func():
		error_edit.text = "INFO: --- Debug adapter server started on port 6006 ---"
	)
	quick_buttons.add_child(debug_server_button)
	
	var language_server_button = Button.new()
	language_server_button.text = "Language Server"
	language_server_button.tooltip_text = "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ language —Å–µ—Ä–≤–µ—Ä–∞"
	language_server_button.pressed.connect(func():
		error_edit.text = "INFO: --- GDScript language server started on port 6005 ---"
	)
	quick_buttons.add_child(language_server_button)
	
	# –ö–Ω–æ–ø–∫–∏
	var buttons = HBoxContainer.new()
	vbox.add_child(buttons)
	
	var add_button = Button.new()
	add_button.text = "–î–æ–±–∞–≤–∏—Ç—å"
	add_button.pressed.connect(func():
		var error_text = error_edit.text.strip_edges()
		if error_text != "":
			var index = errors_list.add_item(error_text)
			
			# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞
			if error_text.begins_with("ERROR:"):
				errors_list.set_item_custom_fg_color(index, Color.RED)
			elif error_text.begins_with("WARNING:"):
				errors_list.set_item_custom_fg_color(index, Color.YELLOW)
			elif error_text.begins_with("INFO:"):
				errors_list.set_item_custom_fg_color(index, Color.CYAN)
			else:
				errors_list.set_item_custom_fg_color(index, Color.WHITE)
			
			dialog.queue_free()
			print("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫: ", error_text)
	)
	buttons.add_child(add_button)
	
	var cancel_button = Button.new()
	cancel_button.text = "–û—Ç–º–µ–Ω–∞"
	cancel_button.pressed.connect(func():
		dialog.queue_free()
	)
	buttons.add_child(cancel_button)
	
	# –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –º–∞—Å—Å–∏–≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
	open_dialogs.append(dialog)
	
	# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
	dialog.visibility_changed.connect(func():
		if not dialog.visible:
			open_dialogs.erase(dialog)
	)
	
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
	get_editor_interface().get_base_control().add_child(dialog)
	dialog.popup_centered()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
func save_executed_commands_history():
	var file = FileAccess.open(EXECUTED_COMMANDS_HISTORY_FILE, FileAccess.WRITE)
	if file:
		file.store_string(JSON.stringify(executed_commands_history))
		file.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
func load_executed_commands_history():
	if FileAccess.file_exists(EXECUTED_COMMANDS_HISTORY_FILE):
		var file = FileAccess.open(EXECUTED_COMMANDS_HISTORY_FILE, FileAccess.READ)
		if file:
			var content = file.get_as_text()
			file.close()
			var json = JSON.new()
			var parse_result = json.parse(content)
			if parse_result == OK:
				executed_commands_history = json.data
			else:
				executed_commands_history = []
		else:
			executed_commands_history = []
	else:
		executed_commands_history = []

	
