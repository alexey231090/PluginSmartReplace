@tool
extends EditorPlugin

var smart_replace_button: Button

func _enter_tree():
	# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
	add_control_to_container(CONTAINER_TOOLBAR, create_toolbar_button())

func _exit_tree():
	# –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏–∑ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
	remove_control_from_container(CONTAINER_TOOLBAR, smart_replace_button)

func create_toolbar_button() -> Button:
	smart_replace_button = Button.new()
	smart_replace_button.text = "Smart Replace"
	smart_replace_button.tooltip_text = "–£–º–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π"
	smart_replace_button.pressed.connect(_on_smart_replace_pressed)
	return smart_replace_button

func _on_smart_replace_pressed():
	print("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!")
	show_smart_replace_dialog_v2()

# ===== JSON –ü–ê–†–°–ï–† –§–£–ù–ö–¶–ò–ò =====

func execute_json_command(json_text: String):
	if json_text.strip_edges() == "":
		print("JSON –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!")
		return
	
	# –û—á–∏—â–∞–µ–º JSON –æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
	var clean_json = clean_json_text(json_text)
	
	var json = JSON.new()
	var parse_result = json.parse(clean_json)
	
	if parse_result != OK:
		print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ", json.get_error_message())
		print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å JSON!")
		return
	
	var data = json.data
	if not data.has("action"):
		print("JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'action'!")
		return
	
	var action = data.action
	var success = false
	
	match action:
		"add_function":
			success = handle_add_function(data)
		"replace_function":
			success = handle_replace_function(data)
		"delete_function":
			success = handle_delete_function(data)
		"add_code":
			success = handle_add_code(data)
		"delete_code":
			success = handle_delete_code(data)
		_:
			print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", action)
			return
	
	if success:
		print("JSON –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
	else:
		print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ JSON –∫–æ–º–∞–Ω–¥—ã!")

func handle_add_function(data: Dictionary) -> bool:
	if not data.has("name") or not data.has("code"):
		print("–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω—ã –ø–æ–ª—è 'name' –∏ 'code'!")
		return false
	
	var name = data.name
	var args = data.get("parameters", "")
	var code = data.code
	var comment = data.get("comment", "")
	
	add_new_function_with_comment(name, args, code, comment)
	return true

func handle_replace_function(data: Dictionary) -> bool:
	if not data.has("signature") or not data.has("code"):
		print("–î–ª—è –∑–∞–º–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω—ã –ø–æ–ª—è 'signature' –∏ 'code'!")
		return false
	
	var signature = data.signature
	var code = data.code
	var comment = data.get("comment", "")  # –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø—É—Å—Ç–æ–π = —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π)
	
	var function_data = find_function_by_signature(signature)
	if function_data.is_empty():
		print("–§—É–Ω–∫—Ü–∏—è —Å —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π '", signature, "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
		return false
	
	smart_replace_function_with_comment(function_data, code, comment)
	return true

func handle_delete_function(data: Dictionary) -> bool:
	if not data.has("signature"):
		print("–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω–æ –ø–æ–ª–µ 'signature'!")
		return false
	
	var signature = data.signature
	var function_data = find_function_by_signature(signature)
	if function_data.is_empty():
		print("–§—É–Ω–∫—Ü–∏—è —Å —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π '", signature, "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
		return false
	
	delete_function(function_data)
	return true

func handle_add_code(data: Dictionary) -> bool:
	if not data.has("code"):
		print("–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞ –Ω—É–∂–Ω–æ –ø–æ–ª–µ 'code'!")
		return false
	
	var code = data.code
	var position = data.get("position", 0)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∫–æ–Ω–µ—Ü
	var line_number = data.get("line_number", 1)
	
	# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–∏
	if data.has("position_type"):
		var position_type = data.position_type
		match position_type:
			"end":
				position = 0
			"start":
				position = 1
			"after_extends":
				position = 2
			"before_extends":
				position = 3
			"specific_line":
				position = 4
				if data.has("line_number"):
					line_number = data.line_number
	
	add_code_to_file(code, position, line_number)
	return true

func handle_delete_code(data: Dictionary) -> bool:
	if not data.has("code"):
		print("–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–¥–∞ –Ω—É–∂–Ω–æ –ø–æ–ª–µ 'code'!")
		return false
	
	var code = data.code
	delete_code_from_file(code)
	return true

func find_function_by_signature(signature: String) -> Dictionary:
	var editor_interface = get_editor_interface()
	var script_editor = editor_interface.get_script_editor()
	
	if script_editor:
		var current_script = script_editor.get_current_script()
		if current_script:
			var file_path = current_script.resource_path
			var functions = find_functions_in_file(file_path)
			
			for func_data in functions:
				if func_data.signature.strip_edges() == signature.strip_edges():
					return func_data
	
	# –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π Dictionary –≤–º–µ—Å—Ç–æ null
	return {}

func clean_json_text(json_text: String) -> String:
	# –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
	var lines = json_text.split("\n")
	var clean_lines = []
	
	for line in lines:
		var clean_line = line.strip_edges()
		# –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
		if clean_line != "" and not clean_line.begins_with("//"):
			clean_lines.append(clean_line)
	
	return "\n".join(clean_lines)

func show_json_preview(json_text: String):
	if json_text.strip_edges() == "":
		print("JSON –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!")
		return
	
	# –û—á–∏—â–∞–µ–º JSON –æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
	var clean_json = clean_json_text(json_text)
	
	var json = JSON.new()
	var parse_result = json.parse(clean_json)
	
	if parse_result != OK:
		print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ", json.get_error_message())
		print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å JSON!")
		return
	
	var data = json.data
	if not data.has("action"):
		print("JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'action'!")
		return
	
	var action = data.action
	var preview_text = ""
	
	match action:
		"add_function":
			preview_text = generate_add_function_preview(data)
		"replace_function":
			preview_text = generate_replace_function_preview(data)
		"delete_function":
			preview_text = generate_delete_function_preview(data)
		"add_code":
			preview_text = generate_add_code_preview(data)
		"delete_code":
			preview_text = generate_delete_code_preview(data)
		_:
			preview_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: " + action
	
	show_preview_dialog(preview_text, json_text)

func generate_add_function_preview(data: Dictionary) -> String:
	if not data.has("name") or not data.has("code"):
		return "‚ùå –û—à–∏–±–∫–∞: –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω—ã –ø–æ–ª—è 'name' –∏ 'code'!"
	
	var name = data.name
	var args = data.get("parameters", "")
	var code = data.code
	var comment = data.get("comment", "")
	
	var signature = "func " + name + "(" + args + "):" if args != "" else "func " + name + "():"
	
	var preview = "‚ûï –î–û–ë–ê–í–ò–¢–¨ –§–£–ù–ö–¶–ò–Æ:\n"
	preview += "üìù –°–∏–≥–Ω–∞—Ç—É—Ä–∞: " + signature + "\n"
	
	if comment.strip_edges() != "":
		preview += "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: " + comment + "\n"
	
	preview += "üìÑ –ö–æ–¥:\n"
	
	var code_lines = code.split("\n")
	for line in code_lines:
		if line.strip_edges() != "":
			preview += "   " + line + "\n"
		else:
			preview += "\n"
	
	preview += "üìç –ú–µ—Å—Ç–æ: –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞"
	return preview

func generate_replace_function_preview(data: Dictionary) -> String:
	if not data.has("signature") or not data.has("code"):
		return "‚ùå –û—à–∏–±–∫–∞: –î–ª—è –∑–∞–º–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω—ã –ø–æ–ª—è 'signature' –∏ 'code'!"
	
	var signature = data.signature
	var code = data.code
	var comment = data.get("comment", "")
	var function_data = find_function_by_signature(signature)
	
	if function_data.is_empty():
		return "‚ùå –§—É–Ω–∫—Ü–∏—è —Å —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π '" + signature + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
	
	var preview = "üîÑ –ó–ê–ú–ï–ù–ò–¢–¨ –§–£–ù–ö–¶–ò–Æ:\n"
	preview += "üìù –°–∏–≥–Ω–∞—Ç—É—Ä–∞: " + signature + "\n"
	preview += "üìç –°—Ç—Ä–æ–∫–∞: " + str(function_data.line) + "\n"
	
	if comment.strip_edges() != "":
		preview += "üí¨ –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: " + comment + "\n"
	else:
		preview += "üóëÔ∏è –°—Ç–∞—Ä—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω\n"
	
	preview += "üìÑ –ù–æ–≤—ã–π –∫–æ–¥:\n"
	
	var code_lines = code.split("\n")
	for line in code_lines:
		if line.strip_edges() != "":
			preview += "   " + line + "\n"
		else:
			preview += "\n"
	
	return preview

func generate_delete_function_preview(data: Dictionary) -> String:
	if not data.has("signature"):
		return "‚ùå –û—à–∏–±–∫–∞: –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω–æ –ø–æ–ª–µ 'signature'!"
	
	var signature = data.signature
	var function_data = find_function_by_signature(signature)
	
	if function_data.is_empty():
		return "‚ùå –§—É–Ω–∫—Ü–∏—è —Å —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π '" + signature + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
	
	var preview = "üóëÔ∏è –£–î–ê–õ–ò–¢–¨ –§–£–ù–ö–¶–ò–Æ:\n"
	preview += "üìù –°–∏–≥–Ω–∞—Ç—É—Ä–∞: " + signature + "\n"
	preview += "üìç –°—Ç—Ä–æ–∫–∞: " + str(function_data.line) + "\n"
	preview += "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –§—É–Ω–∫—Ü–∏—è –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞–¥ –Ω–µ–π –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!"
	
	return preview

func generate_add_code_preview(data: Dictionary) -> String:
	if not data.has("code"):
		return "‚ùå –û—à–∏–±–∫–∞: –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞ –Ω—É–∂–Ω–æ –ø–æ–ª–µ 'code'!"
	
	var code = data.code
	var position = data.get("position", 0)
	var line_number = data.get("line_number", 1)
	
	# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–∏
	if data.has("position_type"):
		var position_type = data.position_type
		match position_type:
			"end":
				position = 0
			"start":
				position = 1
			"after_extends":
				position = 2
			"before_extends":
				position = 3
			"specific_line":
				position = 4
				if data.has("line_number"):
					line_number = data.line_number
	
	var position_names = ["–≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞", "–≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞", "–ø–æ—Å–ª–µ extends", "–ø–µ—Ä–µ–¥ extends", "–Ω–∞ —Å—Ç—Ä–æ–∫—É " + str(line_number)]
	
	var preview = "‚ûï –î–û–ë–ê–í–ò–¢–¨ –ö–û–î:\n"
	preview += "üìç –ú–µ—Å—Ç–æ: " + position_names[position] + "\n"
	preview += "üìÑ –ö–æ–¥:\n"
	
	var code_lines = code.split("\n")
	for line in code_lines:
		if line.strip_edges() != "":
			preview += "   " + line + "\n"
		else:
			preview += "\n"
	
	return preview

func generate_delete_code_preview(data: Dictionary) -> String:
	if not data.has("code"):
		return "‚ùå –û—à–∏–±–∫–∞: –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–¥–∞ –Ω—É–∂–Ω–æ –ø–æ–ª–µ 'code'!"
	
	var code = data.code
	
	var preview = "üóëÔ∏è –£–î–ê–õ–ò–¢–¨ –ö–û–î:\n"
	preview += "üìÑ –ö–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
	
	var code_lines = code.split("\n")
	for line in code_lines:
		if line.strip_edges() != "":
			preview += "   " + line + "\n"
		else:
			preview += "\n"
	
	preview += "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–¥–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ!"
	return preview

func show_preview_dialog(preview_text: String, json_text: String):
	# –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∏–∞–ª–æ–≥–∏
	close_all_dialogs()
	
	var dialog = AcceptDialog.new()
	dialog.title = "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π"
	dialog.size = Vector2(800, 600)
	
	var vbox = VBoxContainer.new()
	dialog.add_child(vbox)
	
	var preview_label = Label.new()
	preview_label.text = "–ß—Ç–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ:"
	vbox.add_child(preview_label)
	
	var preview_edit = TextEdit.new()
	preview_edit.text = preview_text
	preview_edit.editable = false
	preview_edit.custom_minimum_size = Vector2(780, 400)
	vbox.add_child(preview_edit)
	
	var buttons = HBoxContainer.new()
	vbox.add_child(buttons)
	
	var apply_button = Button.new()
	apply_button.text = "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"
	apply_button.pressed.connect(func():
		execute_json_command(json_text)
		dialog.hide()
	)
	buttons.add_child(apply_button)
	
	var cancel_button = Button.new()
	cancel_button.text = "–û—Ç–º–µ–Ω–∞"
	cancel_button.pressed.connect(func(): dialog.hide())
	buttons.add_child(cancel_button)
	
	get_editor_interface().get_base_control().add_child(dialog)
	dialog.popup_centered()

func close_all_dialogs():
	# –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ AcceptDialog
	var base_control = get_editor_interface().get_base_control()
	for child in base_control.get_children():
		if child is AcceptDialog:
			child.hide()

func show_smart_replace_dialog_v2():
	var dialog = AcceptDialog.new()
	dialog.title = "Smart Replace - –£–º–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π"
	dialog.size = Vector2(1000, 800)
	
	# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	var vbox = VBoxContainer.new()
	dialog.add_child(vbox)
	
	# –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
	var tab_container = TabContainer.new()
	tab_container.custom_minimum_size = Vector2(980, 700)
	vbox.add_child(tab_container)
	
	# ===== –í–ö–õ–ê–î–ö–ê 1: JSON =====
	var json_tab = VBoxContainer.new()
	tab_container.add_child(json_tab)
	tab_container.set_tab_title(0, "JSON")
	
	# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è JSON –≤–∫–ª–∞–¥–∫–∏
	var json_label = Label.new()
	json_label.text = "–í—Å—Ç–∞–≤—å—Ç–µ JSON –∫–æ–º–∞–Ω–¥—É –æ—Ç –ò–ò:"
	json_tab.add_child(json_label)
	
	# –ü–æ–ª–µ –¥–ª—è JSON
	var json_edit = TextEdit.new()
	json_edit.placeholder_text = '// –ü—Ä–∏–º–µ—Ä—ã JSON –∫–æ–º–∞–Ω–¥:\n\n// –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é:\n{\n  "action": "add_function",\n  "name": "move_player",\n  "parameters": "direction, speed",\n  "code": "position += direction * speed * delta"\n}\n\n// –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º:\n{\n  "action": "add_function",\n  "name": "take_damage",\n  "parameters": "damage_amount",\n  "comment": "–£–º–µ–Ω—å—à–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ",\n  "code": "player_health -= damage_amount\\nif player_health <= 0:\\n\\tdie()"\n}\n\n// –ó–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é:\n{\n  "action": "replace_function",\n  "signature": "func _ready():",\n  "code": "print(\\"Game started!\\")\\nsetup_player()",\n  "comment": "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"\n}\n\n// –î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞:\n{\n  "action": "add_code",\n  "code": "var player_health = 100",\n  "position_type": "end"\n}\n\n// –î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞:\n{\n  "action": "add_code",\n  "code": "@tool",\n  "position_type": "start"\n}\n\n// –î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ—Å–ª–µ extends:\n{\n  "action": "add_code",\n  "code": "var player_speed = 5.0",\n  "position_type": "after_extends"\n}\n\n// –î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É:\n{\n  "action": "add_code",\n  "code": "var test_var = 42",\n  "position_type": "specific_line",\n  "line_number": 10\n}\n\n// –£–¥–∞–ª–∏—Ç—å –∫–æ–¥:\n{\n  "action": "delete_code",\n  "code": "var old_variable = 10"\n}'
	json_edit.custom_minimum_size = Vector2(960, 600)
	json_tab.add_child(json_edit)
	
	# –ö–Ω–æ–ø–∫–∏ –¥–ª—è JSON –≤–∫–ª–∞–¥–∫–∏
	var json_buttons = HBoxContainer.new()
	json_tab.add_child(json_buttons)
	
	var preview_button = Button.new()
	preview_button.text = "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"
	preview_button.pressed.connect(func():
		var json_text = json_edit.text
		show_json_preview(json_text)
	)
	json_buttons.add_child(preview_button)
	
	var execute_json_button = Button.new()
	execute_json_button.text = "–í—ã–ø–æ–ª–Ω–∏—Ç—å JSON"
	execute_json_button.pressed.connect(func():
		var json_text = json_edit.text
		execute_json_command(json_text)
	)
	json_buttons.add_child(execute_json_button)
	
	var clear_json_button = Button.new()
	clear_json_button.text = "–û—á–∏—Å—Ç–∏—Ç—å"
	clear_json_button.pressed.connect(func():
		json_edit.text = ""
	)
	json_buttons.add_child(clear_json_button)
	
	# ===== –í–ö–õ–ê–î–ö–ê 2: –†–£–ß–ù–ê–Ø –†–ê–ë–û–¢–ê =====
	var manual_tab = VBoxContainer.new()
	tab_container.add_child(manual_tab)
	tab_container.set_tab_title(1, "–†—É—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
	
	# –°–æ–∑–¥–∞–µ–º –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã
	var manual_tab_container = TabContainer.new()
	manual_tab_container.custom_minimum_size = Vector2(960, 650)
	manual_tab.add_child(manual_tab_container)
	
	# ===== –ü–û–î–í–ö–õ–ê–î–ö–ê: –†–ê–ë–û–¢–ê –° –§–£–ù–ö–¶–ò–Ø–ú–ò =====
	var functions_tab = VBoxContainer.new()
	manual_tab_container.add_child(functions_tab)
	manual_tab_container.set_tab_title(0, "–§—É–Ω–∫—Ü–∏–∏")
	
	# –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π
	var function_label = Label.new()
	function_label.text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–º–µ–Ω—ã –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é':"
	functions_tab.add_child(function_label)
	
	var function_list = ItemList.new()
	function_list.custom_minimum_size = Vector2(960, 200)
	functions_tab.add_child(function_list)
	
	# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
	load_functions_list(function_list)
	var add_new_index = function_list.add_item("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é")
	function_list.set_item_metadata(add_new_index, {"is_new": true})
	
	# –ü–æ–ª—è –¥–ª—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
	var new_func_name_label = Label.new()
	new_func_name_label.text = "–ò–º—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: my_func):"
	functions_tab.add_child(new_func_name_label)
	var new_func_name_edit = LineEdit.new()
	new_func_name_edit.placeholder_text = "my_func"
	functions_tab.add_child(new_func_name_edit)
	new_func_name_label.visible = false
	new_func_name_edit.visible = false
	
	var new_func_args_label = Label.new()
	new_func_args_label.text = "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: a, b):"
	functions_tab.add_child(new_func_args_label)
	var new_func_args_edit = LineEdit.new()
	new_func_args_edit.placeholder_text = "a, b"
	functions_tab.add_child(new_func_args_edit)
	new_func_args_label.visible = false
	new_func_args_edit.visible = false
	
	# –ü–æ–ª–µ –¥–ª—è –∫–æ–¥–∞
	var new_code_label = Label.new()
	new_code_label.text = "–ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ):"
	functions_tab.add_child(new_code_label)
	var new_code_edit = TextEdit.new()
	new_code_edit.placeholder_text = "–í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –∫–æ–¥ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ func –∏ –æ—Ç—Å—Ç—É–ø–æ–≤)"
	new_code_edit.custom_minimum_size = Vector2(960, 200)
	functions_tab.add_child(new_code_edit)
	
	# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª–µ–π –¥–ª—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
	function_list.item_selected.connect(func(idx):
		var is_new = function_list.get_item_metadata(idx).has("is_new")
		new_func_name_label.visible = is_new
		new_func_name_edit.visible = is_new
		new_func_args_label.visible = is_new
		new_func_args_edit.visible = is_new
	)
	
	# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
	var functions_buttons = HBoxContainer.new()
	functions_tab.add_child(functions_buttons)
	
	var replace_button = Button.new()
	replace_button.text = "–ü—Ä–∏–º–µ–Ω–∏—Ç—å"
	replace_button.pressed.connect(func():
		var selected_index = function_list.get_selected_items()
		if selected_index.size() > 0:
			var function_data = function_list.get_item_metadata(selected_index[0])
			if function_data.has("is_new"):
				add_new_function(new_func_name_edit.text, new_func_args_edit.text, new_code_edit.text)
			else:
				smart_replace_function(function_data, new_code_edit.text)
		dialog.hide()
	)
	functions_buttons.add_child(replace_button)
	
	var delete_button = Button.new()
	delete_button.text = "–£–¥–∞–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é"
	delete_button.pressed.connect(func():
		var selected_index = function_list.get_selected_items()
		if selected_index.size() > 0:
			var function_data = function_list.get_item_metadata(selected_index[0])
			if not function_data.has("is_new"):
				delete_function(function_data)
		dialog.hide()
	)
	functions_buttons.add_child(delete_button)
	
	var cancel_button = Button.new()
	cancel_button.text = "–û—Ç–º–µ–Ω–∞"
	cancel_button.pressed.connect(func(): dialog.hide())
	functions_buttons.add_child(cancel_button)
	
	# ===== –ü–û–î–í–ö–õ–ê–î–ö–ê: –†–ê–ë–û–¢–ê –° –ö–û–î–û–ú –í–ù–ï –§–£–ù–ö–¶–ò–ô =====
	var code_tab = VBoxContainer.new()
	manual_tab_container.add_child(code_tab)
	manual_tab_container.set_tab_title(1, "–ö–æ–¥ –≤–Ω–µ —Ñ—É–Ω–∫—Ü–∏–π")
	
	# –ó–∞–≥–æ–ª–æ–≤–æ–∫
	var code_label = Label.new()
	code_label.text = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –≤–Ω–µ —Ñ—É–Ω–∫—Ü–∏–π (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã, –∏–º–ø–æ—Ä—Ç—ã –∏ —Ç.–¥.):"
	code_tab.add_child(code_label)
	
	# –í—ã–±–æ—Ä –º–µ—Å—Ç–∞ –≤—Å—Ç–∞–≤–∫–∏
	var position_label = Label.new()
	position_label.text = "–ú–µ—Å—Ç–æ –≤—Å—Ç–∞–≤–∫–∏:"
	code_tab.add_child(position_label)
	
	var position_container = HBoxContainer.new()
	code_tab.add_child(position_container)
	
	var position_option = OptionButton.new()
	position_option.add_item("–í –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞")
	position_option.add_item("–í –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞")
	position_option.add_item("–í –Ω–∞—á–∞–ª–æ –ø–æ—Å–ª–µ extends")
	position_option.add_item("–í –Ω–∞—á–∞–ª–æ –ø–µ—Ä–µ–¥ extends")
	position_option.add_item("–ù–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É")
	position_option.selected = 2  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–í –Ω–∞—á–∞–ª–æ –ø–æ—Å–ª–µ extends"
	position_container.add_child(position_option)
	
	var line_number_edit = SpinBox.new()
	line_number_edit.min_value = 1
	line_number_edit.max_value = 9999
	line_number_edit.value = 1
	line_number_edit.visible = false
	line_number_edit.tooltip_text = "–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (–Ω–∞—á–∏–Ω–∞—è —Å 1)"
	position_container.add_child(line_number_edit)
	
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏
	position_option.item_selected.connect(func(index):
		line_number_edit.visible = (index == 4)  # "–ù–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É"
	)
	
	# –ü–æ–ª–µ –¥–ª—è –∫–æ–¥–∞
	var file_code_label = Label.new()
	file_code_label.text = "–ö–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:"
	code_tab.add_child(file_code_label)
	var file_code_edit = TextEdit.new()
	file_code_edit.placeholder_text = "var my_variable = 10\nconst MY_CONSTANT = 100\n@tool\nextends Node2D"
	file_code_edit.custom_minimum_size = Vector2(960, 200)
	code_tab.add_child(file_code_edit)
	
	# –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
	var separator = HSeparator.new()
	code_tab.add_child(separator)
	
	# –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–¥–∞
	var delete_code_label = Label.new()
	delete_code_label.text = "–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–¥–∞:"
	code_tab.add_child(delete_code_label)
	
	var delete_code_edit = TextEdit.new()
	delete_code_edit.placeholder_text = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Ñ–∞–π–ª–µ):\nvar my_variable = 10"
	delete_code_edit.custom_minimum_size = Vector2(960, 100)
	code_tab.add_child(delete_code_edit)
	
	# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–æ–º
	var code_buttons = HBoxContainer.new()
	code_tab.add_child(code_buttons)
	
	var add_code_button = Button.new()
	add_code_button.text = "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥"
	add_code_button.pressed.connect(func():
		var position = position_option.selected
		var line_number = int(line_number_edit.value)
		add_code_to_file(file_code_edit.text, position, line_number)
		dialog.hide()
	)
	code_buttons.add_child(add_code_button)
	
	var delete_code_button = Button.new()
	delete_code_button.text = "–£–¥–∞–ª–∏—Ç—å –∫–æ–¥"
	delete_code_button.pressed.connect(func():
		delete_code_from_file(delete_code_edit.text)
		dialog.hide()
	)
	code_buttons.add_child(delete_code_button)
	
	var code_cancel_button = Button.new()
	code_cancel_button.text = "–û—Ç–º–µ–Ω–∞"
	code_cancel_button.pressed.connect(func(): dialog.hide())
	code_buttons.add_child(code_cancel_button)
	
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
	get_editor_interface().get_base_control().add_child(dialog)
	dialog.popup_centered()

func load_functions_list(function_list: ItemList):
	var editor_interface = get_editor_interface()
	var script_editor = editor_interface.get_script_editor()
	
	if script_editor:
		var current_script = script_editor.get_current_script()
		if current_script:
			var file_path = current_script.resource_path
			var functions = find_functions_in_file(file_path)
			
			for func_data in functions:
				var display_text = func_data.signature + " (—Å—Ç—Ä–æ–∫–∞ " + str(func_data.line) + ")"
				var index = function_list.add_item(display_text)
				function_list.set_item_metadata(index, func_data)
			
			if functions.size() == 0:
				function_list.add_item("–§—É–Ω–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

func find_functions_in_file(file_path: String) -> Array:
	var functions = []
	
	var file = FileAccess.open(file_path, FileAccess.READ)
	if not file:
		return functions
	
	var lines = file.get_as_text().split("\n")
	file.close()
	
	for i in range(lines.size()):
		var line = lines[i].strip_edges()
		if line.begins_with("func "):
			var func_data = {
				"signature": line,
				"line": i + 1,
				"start_index": i,
				"end_index": find_function_end(lines, i)
			}
			functions.append(func_data)
	
	return functions

func find_function_end(lines: Array, start_index: int) -> int:
	var i = start_index + 1
	var indent_level = get_indent_level(lines[start_index])
	
	while i < lines.size():
		var line = lines[i]
		var clean_line = line.strip_edges()
		
		# –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
		if clean_line == "":
			i += 1
			continue
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—à–ª–∏ –ª–∏ –º—ã —Å–ª–µ–¥—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ –∫–ª–∞—Å—Å
		if clean_line.begins_with("func ") or clean_line.begins_with("class_name") or clean_line.begins_with("extends") or clean_line.begins_with("var ") or clean_line.begins_with("const "):
			var current_indent = get_indent_level(line)
			if current_indent <= indent_level:
				return i
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è (–º–µ–Ω—å—à–∏–π –æ—Ç—Å—Ç—É–ø)
		var current_indent = get_indent_level(line)
		if current_indent < indent_level:
			return i
		
		i += 1
	
	return i

func smart_replace_function(function_data: Dictionary, new_code: String):
	smart_replace_function_with_comment(function_data, new_code, "")

func smart_replace_function_with_comment(function_data: Dictionary, new_code: String, comment: String):
	var editor_interface = get_editor_interface()
	var script_editor = editor_interface.get_script_editor()
	
	if script_editor:
		var current_script = script_editor.get_current_script()
		if current_script:
			var file_path = current_script.resource_path
			var success = replace_function_content_with_comment(file_path, function_data, new_code, comment)
			
			if success:
				print("–§—É–Ω–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–∞!")
				# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
				reload_script_in_editor(current_script)
			else:
				print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ —Ñ—É–Ω–∫—Ü–∏–∏!")

func replace_function_content(file_path: String, function_data: Dictionary, new_code: String) -> bool:
	return replace_function_content_with_comment(file_path, function_data, new_code, "")

func replace_function_content_with_comment(file_path: String, function_data: Dictionary, new_code: String, comment: String) -> bool:
	# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
	var file = FileAccess.open(file_path, FileAccess.READ)
	if not file:
		return false
	
	var content = file.get_as_text()
	file.close()
	
	# –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏
	var new_content = replace_function_content_with_comment_in_text(content, function_data, new_code, comment)
	if new_content == content:
		return false
	
	# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
	file = FileAccess.open(file_path, FileAccess.WRITE)
	if not file:
		return false
	
	file.store_string(new_content)
	file.close()
	
	return true

func replace_function_content_in_text(content: String, function_data: Dictionary, new_code: String) -> String:
	return replace_function_content_with_comment_in_text(content, function_data, new_code, "")

func replace_function_content_with_comment_in_text(content: String, function_data: Dictionary, new_code: String, comment: String) -> String:
	var lines = content.split("\n")
	var result_lines = []
	var i = 0
	
	while i < lines.size():
		if i == function_data.start_index:
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞–¥ —Ñ—É–Ω–∫—Ü–∏–µ–π
			var comment_start = i
			if i > 0 and lines[i-1].strip_edges().begins_with("#"):
				comment_start = i - 1
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
				if comment_start > 0 and lines[comment_start-1].strip_edges() == "":
					comment_start = i - 2
			
			# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
			if comment.strip_edges() != "":
				result_lines.append("")
				result_lines.append("#" + comment)
			
			# –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏
			result_lines.append(lines[i])
			
			# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
			var indent = get_indentation(lines[i])
			var new_code_lines = new_code.split("\n")
			
			for code_line in new_code_lines:
				if code_line.strip_edges() != "":
					result_lines.append(indent + "	" + code_line)
				else:
					result_lines.append("")
			
			# –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
			i = function_data.end_index
		else:
			# –û–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
			result_lines.append(lines[i])
			i += 1
	
	return "\n".join(result_lines)

func replace_function_in_file(file_path: String, old_signature: String, new_function: String) -> bool:
	# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
	var file = FileAccess.open(file_path, FileAccess.READ)
	if not file:
		return false
	
	var content = file.get_as_text()
	file.close()
	
	# –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
	var new_content = find_and_replace_function(content, old_signature, new_function)
	if new_content == content:
		return false
	
	# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
	file = FileAccess.open(file_path, FileAccess.WRITE)
	if not file:
		return false
	
	file.store_string(new_content)
	file.close()
	
	return true

func find_and_replace_function(content: String, old_signature: String, new_function: String) -> String:
	var lines = content.split("\n")
	var result_lines = []
	var i = 0
	
	# –û—á–∏—â–∞–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
	var clean_signature = old_signature.strip_edges()
	print("–ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é: '", clean_signature, "'")
	
	while i < lines.size():
		var line = lines[i]
		var clean_line = line.strip_edges()
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å —Å–∏–≥–Ω–∞—Ç—É—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏
		if clean_line.begins_with(clean_signature):
			print("–ù–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ —Å—Ç—Ä–æ–∫–µ ", i + 1, ": '", clean_line, "'")
			
			# –ù–∞—à–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—ë –ø–æ–ª–Ω–æ—Å—Ç—å—é
			var indent = get_indentation(line)
			var old_end = skip_function(lines, i)
			
			# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º
			var new_function_lines = new_function.split("\n")
			for func_line in new_function_lines:
				if func_line.strip_edges() != "":
					result_lines.append(indent + func_line)
				else:
					result_lines.append("")
			
			i = old_end
			print("–§—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω–µ–Ω–∞!")
		else:
			# –û–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
			result_lines.append(line)
			i += 1
	
	return "\n".join(result_lines)

func get_indentation(line: String) -> String:
	var indent = ""
	for char in line:
		if char == " " or char == "\t":
			indent += char
		else:
			break
	return indent

func skip_function(lines: Array, start_index: int) -> int:
	var i = start_index
	var indent_level = -1
	
	# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ—Ç—Å—Ç—É–ø–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏
	if start_index < lines.size():
		indent_level = get_indent_level(lines[start_index])
		print("–£—Ä–æ–≤–µ–Ω—å –æ—Ç—Å—Ç—É–ø–∞ —Ñ—É–Ω–∫—Ü–∏–∏: ", indent_level)
	
	i = start_index + 1  # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
	
	while i < lines.size():
		var line = lines[i]
		var clean_line = line.strip_edges()
		
		# –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
		if clean_line == "":
			i += 1
			continue
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—à–ª–∏ –ª–∏ –º—ã —Å–ª–µ–¥—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ –∫–ª–∞—Å—Å
		if clean_line.begins_with("func ") or clean_line.begins_with("class_name") or clean_line.begins_with("extends") or clean_line.begins_with("var ") or clean_line.begins_with("const "):
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ—Ç—Å—Ç—É–ø–∞
			var current_indent = get_indent_level(line)
			if current_indent <= indent_level:
				print("–ù–∞–π–¥–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è/–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞ —Å—Ç—Ä–æ–∫–µ ", i + 1, ": '", clean_line, "'")
				return i
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è (–º–µ–Ω—å—à–∏–π –æ—Ç—Å—Ç—É–ø)
		var current_indent = get_indent_level(line)
		if current_indent < indent_level:
			print("–§—É–Ω–∫—Ü–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –Ω–∞ —Å—Ç—Ä–æ–∫–µ ", i, " (–º–µ–Ω—å—à–∏–π –æ—Ç—Å—Ç—É–ø)")
			return i
		
		i += 1
	
	print("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞, —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–æ–∫–µ ", i)
	return i

func get_indent_level(line: String) -> int:
	var level = 0
	for char in line:
		if char == " ":
			level += 1
		elif char == "\t":
			level += 4  # –¢–∞–± = 4 –ø—Ä–æ–±–µ–ª–∞
		else:
			break
	return level 

func add_new_function(name: String, args: String, code: String):
	if name.strip_edges() == "":
		print("–ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
		return
	var editor_interface = get_editor_interface()
	var script_editor = editor_interface.get_script_editor()
	if script_editor:
		var current_script = script_editor.get_current_script()
		if current_script:
			var file_path = current_script.resource_path
			var file = FileAccess.open(file_path, FileAccess.READ)
			if not file:
				print("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞!")
				return
			var content = file.get_as_text()
			file.close()
			var lines = content.split("\n")
			# –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
			var func_header = "func " + name.strip_edges() + "(" + args.strip_edges() + "):" if args.strip_edges() != "" else "func " + name.strip_edges() + "():"
			var func_lines = [func_header]
			for code_line in code.split("\n"):
				if code_line.strip_edges() != "":
					func_lines.append("\t" + code_line)
				else:
					func_lines.append("")
			# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
			if lines.size() > 0 and lines[lines.size()-1].strip_edges() != "":
				lines.append("")
			for func_line in func_lines:
				lines.append(func_line)
			var new_content = "\n".join(lines)
			file = FileAccess.open(file_path, FileAccess.WRITE)
			if not file:
				print("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏!")
				return
			file.store_string(new_content)
			file.close()
			print("–§—É–Ω–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
			# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
			reload_script_in_editor(current_script)

func delete_function(function_data: Dictionary):
	var editor_interface = get_editor_interface()
	var script_editor = editor_interface.get_script_editor()
	
	if script_editor:
		var current_script = script_editor.get_current_script()
		if current_script:
			var file_path = current_script.resource_path
			var success = remove_function_from_file(file_path, function_data)
			
			if success:
				print("–§—É–Ω–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
				# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
				reload_script_in_editor(current_script)
			else:
				print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏!")

func remove_function_from_file(file_path: String, function_data: Dictionary) -> bool:
	# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
	var file = FileAccess.open(file_path, FileAccess.READ)
	if not file:
		return false
	
	var content = file.get_as_text()
	file.close()
	
	# –£–¥–∞–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
	var new_content = remove_function_from_text(content, function_data)
	if new_content == content:
		return false
	
	# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
	file = FileAccess.open(file_path, FileAccess.WRITE)
	if not file:
		return false
	
	file.store_string(new_content)
	file.close()
	
	return true

func remove_function_from_text(content: String, function_data: Dictionary) -> String:
	var lines = content.split("\n")
	var result_lines = []
	var i = 0
	
	while i < lines.size():
		if i == function_data.start_index:
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞–¥ —Ñ—É–Ω–∫—Ü–∏–µ–π
			var comment_start = i
			if i > 0 and lines[i-1].strip_edges().begins_with("#"):
				comment_start = i - 1
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
				if comment_start > 0 and lines[comment_start-1].strip_edges() == "":
					comment_start = i - 2
			
			# –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —Ñ—É–Ω–∫—Ü–∏—é (–æ—Ç comment_start –¥–æ end_index)
			i = function_data.end_index
		else:
			# –û–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
			result_lines.append(lines[i])
			i += 1
	
	return "\n".join(result_lines) 

func reload_script_in_editor(script: Script):
	# –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
	var editor_interface = get_editor_interface()
	var script_editor = editor_interface.get_script_editor()
	
	if script_editor:
		# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç
		script.take_over_path(script.resource_path)
		
		# –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
		editor_interface.get_resource_filesystem().scan()
		
		# –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω
		pass 

func add_code_to_file(code: String, position: int = 0, line_number: int = 1):
	if code.strip_edges() == "":
		print("–ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
		return
		
	var editor_interface = get_editor_interface()
	var script_editor = editor_interface.get_script_editor()
	
	if script_editor:
		var current_script = script_editor.get_current_script()
		if current_script:
			var file_path = current_script.resource_path
			var success = insert_code_to_file(file_path, code, position, line_number)
			
			if success:
				print("–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
				reload_script_in_editor(current_script)
			else:
				print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞!")

func insert_code_to_file(file_path: String, code: String, position: int, line_number: int) -> bool:
	# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
	var file = FileAccess.open(file_path, FileAccess.READ)
	if not file:
		return false
	
	var content = file.get_as_text()
	file.close()
	
	var lines = content.split("\n")
	var code_lines = code.split("\n")
	var insert_index = 0
	
	# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ –≤—Å—Ç–∞–≤–∫–∏
	match position:
		0:  # –í –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
			insert_index = lines.size()
			# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
			if lines.size() > 0 and lines[lines.size()-1].strip_edges() != "":
				lines.append("")
				insert_index += 1
		1:  # –í –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
			insert_index = 0
		2:  # –í –Ω–∞—á–∞–ª–æ –ø–æ—Å–ª–µ extends
			insert_index = find_extends_line(lines) + 1
			if insert_index <= 0:  # –ï—Å–ª–∏ extends –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
				insert_index = 0
		3:  # –í –Ω–∞—á–∞–ª–æ –ø–µ—Ä–µ–¥ extends
			insert_index = find_extends_line(lines)
			if insert_index < 0:  # –ï—Å–ª–∏ extends –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
				insert_index = 0
		4:  # –ù–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É
			insert_index = line_number - 1  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∏–Ω–¥–µ–∫—Å (–Ω–∞—á–∏–Ω–∞—è —Å 0)
			if insert_index < 0:
				insert_index = 0
			elif insert_index > lines.size():
				insert_index = lines.size()
	
	# –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥
	for i in range(code_lines.size()):
		lines.insert(insert_index + i, code_lines[i])
	
	var new_content = "\n".join(lines)
	
	# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
	file = FileAccess.open(file_path, FileAccess.WRITE)
	if not file:
		return false
	
	file.store_string(new_content)
	file.close()
	
	return true 

func find_extends_line(lines: Array) -> int:
	# –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å extends
	for i in range(lines.size()):
		var line = lines[i].strip_edges()
		if line.begins_with("extends "):
			return i
	return -1  # extends –Ω–µ –Ω–∞–π–¥–µ–Ω

func delete_code_from_file(code_to_delete: String):
	if code_to_delete.strip_edges() == "":
		print("–ö–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
		return
		
	var editor_interface = get_editor_interface()
	var script_editor = editor_interface.get_script_editor()
	
	if script_editor:
		var current_script = script_editor.get_current_script()
		if current_script:
			var file_path = current_script.resource_path
			var success = remove_code_from_file(file_path, code_to_delete)
			
			if success:
				print("–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
				reload_script_in_editor(current_script)
			else:
				print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–¥–∞ –∏–ª–∏ –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!")

func remove_code_from_file(file_path: String, code_to_delete: String) -> bool:
	# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
	var file = FileAccess.open(file_path, FileAccess.READ)
	if not file:
		return false
	
	var content = file.get_as_text()
	file.close()
	
	# –£–¥–∞–ª—è–µ–º –∫–æ–¥
	var new_content = remove_code_from_text(content, code_to_delete)
	if new_content == content:
		return false  # –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
	
	# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
	file = FileAccess.open(file_path, FileAccess.WRITE)
	if not file:
		return false
	
	file.store_string(new_content)
	file.close()
	
	return true

func remove_code_from_text(content: String, code_to_delete: String) -> String:
	var lines = content.split("\n")
	var code_lines = code_to_delete.split("\n")
	
	# –ò—â–µ–º –Ω–∞—á–∞–ª–æ –∫–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
	for i in range(lines.size() - code_lines.size() + 1):
		var found = true
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –∫–æ–¥ –Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
		for j in range(code_lines.size()):
			if i + j >= lines.size() or lines[i + j].strip_edges() != code_lines[j].strip_edges():
				found = false
				break
		
		if found:
			# –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–¥
			var result_lines = []
			for k in range(lines.size()):
				if k < i or k >= i + code_lines.size():
					result_lines.append(lines[k])
			
			return "\n".join(result_lines)
	
	# –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
	return content 

func add_new_function_with_comment(name: String, args: String, code: String, comment: String):
	if name.strip_edges() == "":
		print("–ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
		return
		
	var editor_interface = get_editor_interface()
	var script_editor = editor_interface.get_script_editor()
	
	if script_editor:
		var current_script = script_editor.get_current_script()
		if current_script:
			var file_path = current_script.resource_path
			var success = append_function_with_comment_to_file(file_path, name, args, code, comment)
			
			if success:
				print("–§—É–Ω–∫—Ü–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
				reload_script_in_editor(current_script)
			else:
				print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏!")

func append_function_with_comment_to_file(file_path: String, name: String, args: String, code: String, comment: String) -> bool:
	# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
	var file = FileAccess.open(file_path, FileAccess.READ)
	if not file:
		return false
	
	var content = file.get_as_text()
	file.close()
	
	var lines = content.split("\n")
	
	# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
	if lines.size() > 0 and lines[lines.size()-1].strip_edges() != "":
		lines.append("")
	
	# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
	if comment.strip_edges() != "":
		lines.append("# " + comment)
	
	# –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
	var func_header = "func " + name.strip_edges() + "(" + args.strip_edges() + "):" if args.strip_edges() != "" else "func " + name.strip_edges() + "():"
	lines.append(func_header)
	
	# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏
	var code_lines = code.split("\n")
	for code_line in code_lines:
		if code_line.strip_edges() != "":
			lines.append("\t" + code_line)
		else:
			lines.append("")
	
	var new_content = "\n".join(lines)
	
	# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
	file = FileAccess.open(file_path, FileAccess.WRITE)
	if not file:
		return false
	
	file.store_string(new_content)
	file.close()
	
	return true 
